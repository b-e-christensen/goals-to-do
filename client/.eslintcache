[{"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\index.js":"1","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\App.js":"2","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js":"3","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js":"4","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js":"5","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js":"6","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js":"7","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js":"8","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js":"9","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js":"10","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js":"11","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js":"12","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js":"13","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js":"14","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js":"15","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js":"16","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js":"17","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js":"18"},{"size":283,"mtime":1654353561256,"results":"19","hashOfConfig":"20"},{"size":2391,"mtime":1654367199908,"results":"21","hashOfConfig":"20"},{"size":397,"mtime":1654353561233,"results":"22","hashOfConfig":"20"},{"size":215,"mtime":1654353561228,"results":"23","hashOfConfig":"20"},{"size":286,"mtime":1654353561231,"results":"24","hashOfConfig":"20"},{"size":2599,"mtime":1654366797367,"results":"25","hashOfConfig":"20"},{"size":3672,"mtime":1654353561261,"results":"26","hashOfConfig":"20"},{"size":552,"mtime":1654367249435,"results":"27","hashOfConfig":"20"},{"size":3079,"mtime":1654353561230,"results":"28","hashOfConfig":"20"},{"size":2580,"mtime":1654353561235,"results":"29","hashOfConfig":"20"},{"size":1089,"mtime":1654366945734,"results":"30","hashOfConfig":"20"},{"size":2535,"mtime":1654353561268,"results":"31","hashOfConfig":"20"},{"size":12984,"mtime":1654363752559,"results":"32","hashOfConfig":"20"},{"size":1701,"mtime":1654353561251,"results":"33","hashOfConfig":"20"},{"size":2211,"mtime":1654353561234,"results":"34","hashOfConfig":"20"},{"size":401,"mtime":1654353561269,"results":"35","hashOfConfig":"20"},{"size":566,"mtime":1654366731834,"results":"36","hashOfConfig":"20"},{"size":513,"mtime":1654367030644,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"twuus",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\index.js",[],["81","82"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\App.js",["83"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js",["84"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_GOAL } from '../utils/mutations';\r\nimport GoalCard from './GoalCard'\r\n// Here we are importing a CSS file as a dependency\r\nimport '../styles/Header.css';\r\n\r\nfunction Goals() {\r\n\r\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\r\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addGoal({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: 'Low',\r\n      completeByDate: ''\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\r\n          <div className=\"card-body\">\r\n\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Name of goal\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  value={formState.goal}\r\n                  onChange={handleChange}\r\n                />\r\n                <label>\r\n                  Priority\r\n                  <select\r\n                    className=\"form-input\"\r\n                    placeholder=\"Priority\"\r\n                    name=\"priority\"\r\n                    value={formState.priority}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Low'>Low</option>\r\n                    <option value='Medium'>Medium</option>\r\n                    <option value='High'>High</option>\r\n                  </select>\r\n                </label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Date to complete by\"\r\n                  name=\"completeByDate\"\r\n                  type=\"date\"\r\n                  value={formState.completeByDate}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <GoalCard />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Goals;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js",["85"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../utils/mutations';\r\nimport TODOCard from './TODOCard';\r\n\r\nconst Todo = (props) => {\r\n  const [formState, setFormState] = useState({ name: '', priority: '' });\r\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addTodo({\r\n        variables: { ...formState },\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: '',\r\n    });\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\r\n          <div className=\"card-body\">\r\n            {data ? (\r\n              <p>\r\n                Success!\r\n              </p>\r\n            ) : (\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Name of todo\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  value={formState.todo}\r\n                  onChange={handleChange}\r\n                />\r\n                <label>\r\n                  Priority\r\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\r\n                    <option value=\"High\">High</option>\r\n                    <option value=\"Medium\">Medium</option>\r\n                    <option value=\"Low\">Low</option>\r\n                  </select>\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div> \r\n        <TODOCard />\r\n       \r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js",["86","87","88"],"import React, { useEffect, useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { GET_USER_ALL } from '../utils/queries'\r\nimport StepModal from './StepModal'\r\nimport { UPDATE_STEP, REMOVE_STEP, UPDATE_GOAL, REMOVE_GOAL } from '../utils/mutations';\r\n\r\n\r\nconst GoalCard = (props) => {\r\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  })\r\n\r\n  const userInfo = data?.getUser.goals || [];\r\n\r\n  const [userState, setUserState] = useState([...userInfo])\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [stepState, setStepState] = useState([])\r\n  const [viewState, setViewState] = useState('incomplete')\r\n\r\n  const [updateStep] = useMutation(UPDATE_STEP);\r\n  const [removeStep] = useMutation(REMOVE_STEP);\r\n  const [updateGoal] = useMutation(UPDATE_GOAL)\r\n  const [removeGoal] = useMutation(REMOVE_GOAL)\r\n\r\n  let stepArray = []\r\n\r\n  if (stepState[0]) {\r\n    stepArray = stepState\r\n  } else {\r\n    stepArray = Object.keys(stepState)\r\n  }\r\n\r\n  const openModal = () => {\r\n    setShowModal(true)\r\n  }\r\n\r\n  const showSteps = (goalId) => {\r\n    setStepState({\r\n      ...stepState,\r\n      [goalId]: { step: true }\r\n    })\r\n  }\r\n\r\n  const closeSteps = (goalId) => {\r\n    const steps = stepArray.filter((step) => step !== goalId)\r\n    setStepState([...steps])\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n    {/* initial render will display incomplete goals */}\r\n      {viewState ? (\r\n        <>\r\n          <div className='display-flex justify-space-between'>\r\n            <h2>\r\n              {userInfo.length\r\n                ? `Viewing Incomplete Goals:`\r\n                : 'Create a Goal'}\r\n            </h2>\r\n            <button className='w-fit-content' onClick={() => { setViewState('') }}>View Complete Goals</button>\r\n          </div>\r\n\r\n          {userInfo.map((goal) => {\r\n            return (\r\n              goal.completed ? ('') : (\r\n                <Card key={goal._id} border='dark'>\r\n                  <Card.Body>\r\n                    <Card.Title className='text-center'>\r\n                      <h5>{goal.name}</h5>\r\n                    </Card.Title>\r\n                    <div className='display-flex justify-space-between'>\r\n                      <Card.Text>\r\n                        <div className='w-fit-content display-flex flex-column mt-5'>\r\n                          <p className='mb-0'>Priority: {goal.priority}</p>\r\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\r\n                          <p>Steps: {goal.steps.length}</p>\r\n                        </div>\r\n                      </Card.Text>\r\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\r\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\r\n                        {goal.completed ?\r\n                          (<button className='w-fit-content' onClick={(e) => {\r\n                            updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\r\n                            refetch()\r\n                          }}>Completed!</button>) :\r\n                          (<button className='w-fit-content' onClick={(e) => {\r\n                            updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\r\n                            refetch()\r\n                          }}>Mark as Complete</button>)}\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          removeGoal({ variables: { _id: goal._id } })\r\n                          refetch()\r\n                        }}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                    {stepArray.includes(goal._id) ? (\r\n                      <>\r\n                        <div key={goal._id} className='mt-3 ml-5'>\r\n                          <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Step(s) to complete {goal.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\r\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\r\n                          </div>\r\n                          <div className='display-flex flex-column'>\r\n                            {goal.steps.map((step) => (\r\n                              step.completed ? (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\r\n                                      refetch()\r\n                                    }}>Completed!</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              ) : (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\r\n                                      refetch()\r\n                                    }}>Mark Complete</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                            ))}\r\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\r\n                          </div>\r\n                        </div>\r\n                      </>) : ('')}\r\n                  </Card.Body>\r\n                </Card>\r\n              ))\r\n          })}\r\n\r\n        </>) : \r\n        // displays all the completed goals\r\n        (<>\r\n          <div className='display-flex justify-space-between'>\r\n            <h2>\r\n              {userInfo.length\r\n                ? `Viewing Completed Goals:`\r\n                : 'Create a Goal'}\r\n            </h2>\r\n            <button className='w-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete Goals</button>\r\n          </div>\r\n          {userInfo.map((goal) => {\r\n            return (\r\n              goal.completed ? (\r\n                <Card key={goal._id} border='dark'>\r\n                  <Card.Body>\r\n                    <Card.Title className='text-center'>\r\n                      <h5>{goal.name}</h5>\r\n                    </Card.Title>\r\n                    <div className='display-flex justify-space-between'>\r\n                      <Card.Text>\r\n                        <div className='w-fit-content display-flex flex-column mt-5'>\r\n                          <p className='mb-0'>Priority: {goal.priority}</p>\r\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\r\n                          <p>Steps: {goal.steps.length}</p>\r\n                        </div>\r\n                      </Card.Text>\r\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\r\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\r\n                        {goal.completed ?\r\n                          (<button className='w-fit-content' onClick={(e) => {\r\n                            updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\r\n                            refetch()\r\n                          }}>Completed!</button>) :\r\n                          (<button className='w-fit-content' onClick={(e) => {\r\n                            updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\r\n                            refetch()\r\n                          }}>Mark as Complete</button>)}\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          removeGoal({ variables: { _id: goal._id } })\r\n                          refetch()\r\n                        }}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                    {stepArray.includes(goal._id) ? (\r\n                      <>\r\n                        <div key={goal._id} className='mt-3 ml-5'>\r\n                          <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Step(s) to complete {goal.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\r\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\r\n                          </div>\r\n                          <div className='display-flex flex-column'>\r\n                            {goal.steps.map((step) => (\r\n                              step.completed ? (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\r\n                                      refetch()\r\n                                    }}>Completed!</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              ) : (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\r\n                                      refetch()\r\n                                    }}>Mark Complete</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                            ))}\r\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\r\n                          </div>\r\n                        </div>\r\n                      </>) : ('')}\r\n                  </Card.Body>\r\n                </Card>\r\n              ) : (''))\r\n          })}\r\n        </>)}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GoalCard;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js",["89"],"import React from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { GET_USER_ALL } from '../utils/queries'\r\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\r\n\r\nconst TODOCard = (props) => {\r\n  const [updateTodo] = useMutation(UPDATE_TODO);\r\n  const [removeTodo] = useMutation(REMOVE_TODO);\r\n\r\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\r\n  const userInfo = data?.getUser.todos || [];\r\n\r\n\r\n  return (\r\n    <Container className='custom-cont-alter' data-count={props.count}>\r\n      <h2>\r\n        {userInfo.length\r\n          ? `Viewing ${userInfo.length} To Do's:`\r\n          : 'Create a To Do'}\r\n      </h2>\r\n\r\n      {userInfo.map((todo) => {\r\n        return (\r\n          <Card key={todo._id} border='dark' className='custom-card-width'>\r\n            <Card.Body id={todo._id}>\r\n              <Card.Title>{todo.name}</Card.Title>\r\n              <p className='small'>Priority: {todo.priority}</p>\r\n              {todo.completed ? (<Card.Text>Completed</Card.Text>) : (\r\n                <Card.Text>Not yet completed</Card.Text>\r\n              )}\r\n              \r\n              <label> Mark as Complete\r\n                <input type=\"checkbox\" onChange={(e) => {updateTodo({variables: {_id: todo._id, name: todo.name, completed: true, priority: todo.priority}}); refetch()}}/>\r\n              </label>\r\n              <label> Remove\r\n                <input type=\"checkbox\" onChange={(e) => { removeTodo({variables: {_id: todo._id}}); refetch() }} />\r\n              </label>\r\n            </Card.Body >\r\n          </Card>\r\n        );\r\n      })}\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TODOCard;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js",["90","91"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_STEP } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Add Step</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of step\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js",["92","93"],"import React, { useState } from \"react\";\r\n// import Start from './Start'\r\n// import Login from '../pages/Login';\r\nimport Navbar from '../components/Navbar';\r\nimport TODO from \"../components/TODO\";\r\nimport Goals from \"../components/Goals\";\r\nimport Auth from \"../utils/auth\";\r\n\r\n\r\nfunction Dashboard() {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if(!token) {\r\n        window.location.href = \"/\"\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <Navbar />\r\n            <TODO />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":12,"column":8,"nodeType":"100","messageId":"101","endLine":12,"endColumn":14},{"ruleId":"98","severity":1,"message":"102","line":11,"column":28,"nodeType":"100","messageId":"101","endLine":11,"endColumn":32},{"ruleId":"98","severity":1,"message":"102","line":25,"column":15,"nodeType":"100","messageId":"101","endLine":25,"endColumn":19},{"ruleId":"98","severity":1,"message":"103","line":10,"column":11,"nodeType":"100","messageId":"101","endLine":10,"endColumn":18},{"ruleId":"98","severity":1,"message":"104","line":18,"column":10,"nodeType":"100","messageId":"101","endLine":18,"endColumn":19},{"ruleId":"98","severity":1,"message":"105","line":18,"column":21,"nodeType":"100","messageId":"101","endLine":18,"endColumn":33},{"ruleId":"98","severity":1,"message":"103","line":11,"column":11,"nodeType":"100","messageId":"101","endLine":11,"endColumn":18},{"ruleId":"98","severity":1,"message":"106","line":17,"column":21,"nodeType":"100","messageId":"101","endLine":17,"endColumn":26},{"ruleId":"98","severity":1,"message":"102","line":17,"column":28,"nodeType":"100","messageId":"101","endLine":17,"endColumn":32},{"ruleId":"98","severity":1,"message":"107","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"108","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":13},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used.","'useState' is defined but never used.","'Goals' is defined but never used.","no-global-assign","no-unsafe-negation"]