[{"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\index.js":"1","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\App.js":"2","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js":"3","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js":"4","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js":"5","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js":"6","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js":"7","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\SingleProject.js":"8","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProjectDashboard.js":"9","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js":"10","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js":"11","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProfilePage.js":"12","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js":"13","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js":"14","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\CollaboratorModal.js":"15","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TaskCard.js":"16","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Projects.js":"17","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js":"18","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js":"19","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js":"20","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js":"21","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js":"22","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js":"23","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js":"24","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js":"25","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js":"26"},{"size":283,"mtime":1654353561256,"results":"27","hashOfConfig":"28"},{"size":3376,"mtime":1654707209646,"results":"29","hashOfConfig":"28"},{"size":397,"mtime":1654353561233,"results":"30","hashOfConfig":"28"},{"size":215,"mtime":1654353561228,"results":"31","hashOfConfig":"28"},{"size":352,"mtime":1654725979551,"results":"32","hashOfConfig":"28"},{"size":513,"mtime":1654367030644,"results":"33","hashOfConfig":"28"},{"size":524,"mtime":1654372466373,"results":"34","hashOfConfig":"28"},{"size":6307,"mtime":1654728583611,"results":"35","hashOfConfig":"28"},{"size":522,"mtime":1654643961473,"results":"36","hashOfConfig":"28"},{"size":2599,"mtime":1654366797367,"results":"37","hashOfConfig":"28"},{"size":3672,"mtime":1654353561261,"results":"38","hashOfConfig":"28"},{"size":2768,"mtime":1654733772911,"results":"39","hashOfConfig":"28"},{"size":2450,"mtime":1654372466368,"results":"40","hashOfConfig":"28"},{"size":3077,"mtime":1654372466367,"results":"41","hashOfConfig":"28"},{"size":2204,"mtime":1654712510523,"results":"42","hashOfConfig":"28"},{"size":1656,"mtime":1654728767843,"results":"43","hashOfConfig":"28"},{"size":3314,"mtime":1654728472497,"results":"44","hashOfConfig":"28"},{"size":1043,"mtime":1654728843795,"results":"45","hashOfConfig":"28"},{"size":1089,"mtime":1654366945734,"results":"46","hashOfConfig":"28"},{"size":3451,"mtime":1654726383475,"results":"47","hashOfConfig":"28"},{"size":1422,"mtime":1654733772910,"results":"48","hashOfConfig":"28"},{"size":4706,"mtime":1654605993363,"results":"49","hashOfConfig":"28"},{"size":12817,"mtime":1654739326948,"results":"50","hashOfConfig":"28"},{"size":2214,"mtime":1654605993364,"results":"51","hashOfConfig":"28"},{"size":2214,"mtime":1654605993361,"results":"52","hashOfConfig":"28"},{"size":2211,"mtime":1654353561234,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"twuus",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"56"},"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\index.js",[],["120","121"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\App.js",["122","123"],"import React from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n// Custom components and page loads \r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Login from './pages/Login'\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport Signup from './pages/Signup'\r\nimport Start from './components/Start'\r\nimport TodoDashboard from './pages/TodoDashboard';\r\nimport GoalDashboard from './pages/GoalDashboard'\r\nimport ProjectDashboard from './pages/ProjectDashboard'\r\nimport useLocalStorage from 'use-local-storage'\r\nimport SingleProject from './components/SingleProject';\r\n//import Auth from './utils/auth';\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n\r\nfunction App() {\r\n  const defaultDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  const [theme, setTheme] = useLocalStorage('theme', defaultDark ? 'dark' : 'light');\r\n  const el = document.getElementById('root')\r\n  el.classList.add(`${theme}`)\r\n\r\n  const switchTheme = () => {\r\n    el.classList.remove(`${theme}`)\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme)\r\n  }\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"flex-column justify-flex-start min-100-vh\">\r\n          <Header />\r\n          <div className=\"container\">\r\n            <Routes>\r\n              <Route\r\n                path=\"/\"\r\n                element={<Start />}\r\n              />\r\n              <Route\r\n                path=\"/login\"\r\n                element={<Login />}\r\n              />\r\n              <Route\r\n                path=\"/signup\"\r\n                element={<Signup />}\r\n              />\r\n              <Route\r\n                path=\"/todos\"\r\n                element={<TodoDashboard />}\r\n              />\r\n              <Route\r\n                path=\"/goals\"\r\n                element={<GoalDashboard />}\r\n              />\r\n              <Route\r\n                path=\"/projects\"\r\n                element={<ProjectDashboard />}\r\n              />\r\n              <Route\r\n                path=\"/projects/:projectId\"\r\n                element={<SingleProject />}\r\n              />\r\n              <Route\r\n                path=\"/profile\"\r\n                element={<ProfilePage />}\r\n              />\r\n            </Routes>\r\n          </div>\r\n          {/* <Footer /> */}\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js",["124"],"import React, { useState } from \"react\";\r\n// import Start from './Start'\r\n// import Login from '../pages/Login';\r\nimport Navbar from '../components/Navbar';\r\nimport TODO from \"../components/TODO\";\r\nimport Auth from \"../utils/auth\";\r\n\r\n\r\nfunction Dashboard() {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if(!token) {\r\n        window.location.href = \"/\"\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <Navbar />\r\n            <TODO />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\SingleProject.js",["125","126"],"import { useMutation, useQuery } from '@apollo/client';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { GET_SINGLE_PROJECT } from '../utils/queries';\r\nimport { useParams } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport CollaboratorModal from './CollaboratorModal'\r\nimport { ADD_TASK } from '../utils/mutations';\r\nimport TaskCard from './TaskCard';\r\n\r\nfunction SingleProject() {\r\n  const { projectId } = useParams()\r\n  console.log(projectId)\r\n  const { loading, data, refetch } = useQuery(GET_SINGLE_PROJECT, {\r\n    variables: { id: projectId },\r\n  })\r\n\r\n  const project = data?.getSingleProject || []\r\n  const collaborators = project.collaborators || []\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  })\r\n  \r\n  console.log(project)\r\n\r\n  const [formDisplayState, setFormDisplayState] = useState('collapsed')\r\n  const [formState, setFormState] = useState({ name: '', priority: 'Low' });\r\n  const [assigneesState, setAssigneesState] = useState([])\r\n\r\n  const [addTask] = useMutation(ADD_TASK)\r\n\r\n  const [showModal, setShowModal] = useState(false)\r\n\r\n  const openModal = () => {\r\n    setShowModal(true)\r\n  }\r\n\r\n  let assigneesArr = [...assigneesState]\r\n\r\n  console.log(assigneesArr)\r\n  console.log(assigneesState)\r\n\r\n\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  console.log(formState)\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    console.log([...assigneesState])\r\n    const arrOfObj = []\r\n    assigneesArr.map((assignee) => {\r\n      arrOfObj.push({\r\n        assignee\r\n      })\r\n    } )\r\n    console.log(arrOfObj)\r\n    try {\r\n      const { data } = await addTask({\r\n        variables: { \r\n          name: formState.name,\r\n          priority: formState.priority,\r\n          assignees: [...assigneesState],\r\n          projectId: projectId\r\n        },\r\n      });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: 'Low',\r\n      completeByDate: ''\r\n    });\r\n  };\r\n\r\n  const assigneesFunction = async (id) => {\r\n\r\n    const checkbox = document.getElementById(id)\r\n\r\n    if (checkbox.checked) {\r\n      setAssigneesState([\r\n        ...assigneesState,\r\n        checkbox.value\r\n      ])\r\n    } else if (!checkbox.checked) {\r\n      const assignees = assigneesArr.filter((assignee) => assignee !== checkbox.value)\r\n      setAssigneesState([...assignees])\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className='display-flex h-100'>\r\n        <div className='w-75 display-flex justify-center align-center'><h4 className='text-center'>{project.name}</h4></div>\r\n        <div className='w-25 overflow-scroll'>\r\n          <div className='display-flex justify-space-between mr-3 mt-3 align-items'><h4>Collaborators</h4><div className='plus radius' onClick={openModal}></div>\r\n            {showModal ? <CollaboratorModal setShowModal={setShowModal} projectId={projectId} /> : null}\r\n          </div>\r\n          {collaborators.map((collaborator) => {\r\n            return (\r\n              <div>\r\n                <p>{collaborator.name} - {collaborator.email}</p>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {formDisplayState ? (\r\n        <main className=\"flex-row justify-center mb-4\">\r\n          <div className=\"col-12 col-lg-10 text-center card-header bg-dark text-light p-2 display-flex justify-space-between align-center\">\r\n            <h4>Create A Task</h4>\r\n            <div className='plus radius' onClick={() => (setFormDisplayState(''))}></div>\r\n          </div>\r\n        </main>\r\n      ) : (\r\n        <main className=\"flex-row justify-center mb-4\">\r\n          <div className=\"col-12 col-lg-10\">\r\n            <div className=\"card\">\r\n              <div className=\"w-100 text-center card-header bg-dark text-light p-2 display-flex justify-space-between align-center\">\r\n                <h4>Create A Task</h4>\r\n                <div className='minus' onClick={() => (setFormDisplayState('collapsed'))}>X</div>\r\n              </div>\r\n              <div className=\"card-body\">\r\n\r\n                <form onSubmit={handleFormSubmit}>\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"Name of task\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    value={formState.task}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <label>\r\n                    Priority\r\n                    <select\r\n                      className=\"form-input\"\r\n                      placeholder=\"Priority\"\r\n                      name=\"priority\"\r\n                      value={formState.priority}\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option value='Low'>Low</option>\r\n                      <option value='Medium'>Medium</option>\r\n                      <option value='High'>High</option>\r\n                    </select>\r\n                  </label>\r\n                  <br></br>\r\n\r\n                  <label>Assign Collaborators</label>\r\n                  {collaborators.map((collaborator) => {\r\n                    return (\r\n                      <div className='ml-3'>\r\n                        <input type='checkbox'\r\n                          id={collaborator.email}\r\n                          name=\"assignees\"\r\n                          value={collaborator.name}\r\n                          onChange={(e) => assigneesFunction(collaborator.email)}></input>\r\n                        <label>{collaborator.name}</label><br></br>\r\n                      </div>\r\n                    )\r\n                  })}\r\n\r\n                  <button\r\n                    className=\"btn btn-block btn-info\"\r\n                    style={{ cursor: 'pointer' }}\r\n                    type=\"submit\"\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n\r\n\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </main>\r\n      )}\r\n        <TaskCard projectId={projectId}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleProject","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProjectDashboard.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProfilePage.js",["127","128","129"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { UPDATE_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\nimport { GET_USER_ALL } from '../utils/queries'\r\nimport Navbar from '../components/Navbar'\r\n\r\nconst ProfilePage = (props) => {\r\n    const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [updateUser] = useMutation(UPDATE_USER);\r\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\r\n  const userInfo = data?.getUser || {};\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      await updateUser({\r\n        variables: { ...formState },\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    setFormState({\r\n      email: '',\r\n      password: '',\r\n      username: '',\r\n    });\r\n    refetch()\r\n  };\r\n\r\n\r\n  return (\r\n  \r\n    <main className=\"flex-row justify-center mb-4\">\r\n        <Navbar/>\r\n        <div className=\"col-12 col-lg-10\">\r\n        {userInfo ? (    \r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Profile</h4>\r\n          <div className=\"card-body\">\r\n              <form onSubmit={handleFormSubmit}>\r\n                 <input\r\n                  className=\"form-input\"\r\n                  placeholder={userInfo.username}\r\n                  name=\"username\"\r\n                  type=\"username\"\r\n                  value={formState.username}\r\n                  onChange={handleChange}\r\n                />  \r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder={userInfo.email}\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"******\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n          </div>\r\n        </div>) : ('')\r\n}\r\n      </div>\r\n    </main>\r\n      \r\n  )};\r\n\r\nexport default ProfilePage;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js",["130"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../utils/mutations';\r\nimport TODOCard from './TODOCard';\r\n\r\nconst Todo = (props) => {\r\n  const [formState, setFormState] = useState({ name: '', priority: '' });\r\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addTodo({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\r\n          <div className=\"card-body\">\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Name of todo\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  value={formState.todo}\r\n                  onChange={handleChange}\r\n                />\r\n                <label>\r\n                  Priority\r\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\r\n                    <option value=\"High\">High</option>\r\n                    <option value=\"Medium\">Medium</option>\r\n                    <option value=\"Low\">Low</option>\r\n                  </select>\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div> \r\n        <TODOCard />\r\n       \r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js",["131"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_GOAL } from '../utils/mutations';\r\nimport GoalCard from './GoalCard'\r\n// Here we are importing a CSS file as a dependency\r\nimport '../styles/Header.css';\r\n\r\nfunction Goals() {\r\n\r\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\r\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addGoal({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: 'Low',\r\n      completeByDate: ''\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\r\n          <div className=\"card-body\">\r\n\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Name of goal\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  value={formState.goal}\r\n                  onChange={handleChange}\r\n                />\r\n                <label>\r\n                  Priority\r\n                  <select\r\n                    className=\"form-input\"\r\n                    placeholder=\"Priority\"\r\n                    name=\"priority\"\r\n                    value={formState.priority}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Low'>Low</option>\r\n                    <option value='Medium'>Medium</option>\r\n                    <option value='High'>High</option>\r\n                  </select>\r\n                </label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Date to complete by\"\r\n                  name=\"completeByDate\"\r\n                  type=\"date\"\r\n                  value={formState.completeByDate}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <GoalCard />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Goals;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\CollaboratorModal.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TaskCard.js",["132","133"],"import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Card, Container } from 'react-bootstrap';\r\nimport { GET_SINGLE_PROJECT } from '../utils/queries';\r\n\r\nfunction TaskCard({ projectId }) {\r\n\r\n  const { loading, data, refetch } = useQuery(GET_SINGLE_PROJECT, {\r\n    variables: { id: projectId },\r\n  })\r\n\r\n  const tasks = data?.getSingleProject.tasks || []\r\n  console.log(tasks)\r\n\r\n\r\n  return (\r\n    <>\r\n      <Container className='display-flex justify-center align-center flex-column'>\r\n        {tasks.map((task) => {\r\n          return (\r\n            <Card border='dark' className='custom-card-width'>\r\n              <Card.Body>\r\n                <Card.Title className='display-flex align-center justify-center'>\r\n                  <h5>{task.name} - <span className='created-by'>created by</span> {task.creator}</h5>\r\n                </Card.Title>\r\n                <Card.Text>\r\n                  <div className='w-fit-content display-flex flex-column mt-5'>\r\n                    <h6 className='mb-0'>Priority: {task.priority}</h6>\r\n                    {task.assignees[0] ? (\r\n                      <div>\r\n                      <h6>This task has been assigned to:</h6>\r\n                      {task.assignees.map((assignee) => {\r\n                        return (\r\n                          <p className='mb-0 ml-2'>-- {assignee}</p>\r\n                        )\r\n                      })}\r\n                    </div>) : ('')}\r\n\r\n\r\n\r\n                  </div>\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          )\r\n        })}\r\n\r\n\r\n\r\n      </Container>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskCard","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Projects.js",["134"],"import { useMutation, useQuery } from '@apollo/client';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { GET_PROJECTS } from '../utils/queries';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { ADD_PROJECT } from '../utils/mutations';\r\n\r\nfunction Projects() {\r\n\r\n  const { loading, data, refetch } = useQuery(GET_PROJECTS)\r\n  \r\n  const userInfo = data?.getUser.projects || []\r\n  const allData = data?.getUser || []\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  })\r\n\r\n  const [formDisplayState, setFormDisplayState] = useState('collapsed')\r\n  const [formState, setFormState] = useState({ name: '' });\r\n  const [addProject] = useMutation(ADD_PROJECT)\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  console.log(formState)\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addProject({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    // clear form values\r\n    setFormDisplayState('collapsed');\r\n  };\r\n\r\n  console.log(allData)\r\n  return (\r\n    <>\r\n      <div>\r\n        {formDisplayState ? (\r\n          <div className='flex-display flex-row justify-center align-center w-100 mt-4'>\r\n            <h4>Your Projects</h4>\r\n            <div className='plus radius ml-5' onClick={() => (setFormDisplayState(''))}></div>\r\n          </div>) : (\r\n          <main className=\"flex-row justify-center mb-4\">\r\n            <div className=\"col-12 col-lg-10\">\r\n            <h4 className='text-center mt-4'>Your Projects</h4>\r\n              <div className=\"card\">\r\n                <div className=\"w-100 text-center card-header bg-dark text-light p-2 display-flex justify-space-between align-center\">\r\n                  <h4>Create A Project</h4>\r\n                  <div className='minus' onClick={() => (setFormDisplayState('collapsed'))}>X</div>\r\n                </div>\r\n                <div className=\"card-body\">\r\n\r\n                  <form onSubmit={handleFormSubmit}>\r\n                    <input\r\n                      className=\"form-input\"\r\n                      placeholder=\"Name of task\"\r\n                      name=\"name\"\r\n                      type=\"text\"\r\n                      value={formState.task}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <button\r\n                      className=\"btn btn-block btn-info\"\r\n                      style={{ cursor: 'pointer' }}\r\n                      type=\"submit\"\r\n                    >\r\n                      Submit\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </main>\r\n        )}\r\n      </div>\r\n      <Container>\r\n        {userInfo.map((project) => {\r\n          return (\r\n            <Card className='m-3 '>\r\n              <Link\r\n                to={`/projects/${project._id}`}>\r\n                <h5 className='m-2'>{project.name}</h5>\r\n              </Link>\r\n            </Card>\r\n          )\r\n        })}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Projects","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js",["135"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/Navbar.css';\r\nimport Auth from '../utils/auth';\r\nimport ThemeSVG from '../styles/images/theme.svg'\r\nimport useLocalStorage from 'use-local-storage'\r\n\r\n// In Navbar, we can assign a style from an object by using curly braces\r\nfunction Navbar({ currentPage, handlePageChange }) {\r\n  const defaultDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  const [theme, setTheme] = useLocalStorage('theme', defaultDark ? 'dark' : 'light');\r\n  const el = document.getElementById('root')\r\n  el.classList.add(`${theme}`)\r\n  \r\n  const switchTheme = () => {\r\n    el.classList.remove(`${theme}`)\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='nav-card'>\r\n      <div className='nav-card-header'>\r\n        <Link to=\"/todos\">To Do</Link>\r\n        <Link to=\"/goals\">Goals</Link>\r\n        <Link to=\"/projects\">Projects</Link>\r\n        <Link to=\"/profile\">Profile</Link>\r\n        <button aria-label=\"Changes light and dark mode\" id=\"darkmode-button\" className=\"nav-link-dark\" onClick={switchTheme}>\r\n                        <img src={ThemeSVG} className=\"nav-link-dark-img\"></img>\r\n                        </button>\r\n        <button onClick={Auth.logout} className=\"logout-btn\">Logout</button>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js",["136"],"import React, { useEffect, useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { GET_USER_ALL } from '../utils/queries'\r\nimport ToDoModal from './ToDoModal'\r\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\r\n\r\nconst TODOCard = (props) => {\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [updateTodo] = useMutation(UPDATE_TODO);\r\n  const [removeTodo] = useMutation(REMOVE_TODO);\r\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  })\r\n\r\n  const userInfo = data?.getUser.todos || [];\r\n\r\n  const openModal = () => {\r\n    setShowModal(true)\r\n  }\r\n\r\n  const [viewState, setViewState] = useState('incomplete')\r\n\r\n\r\n  return (\r\n    <Container className='custom-cont-alter' data-count={props.count}>\r\n      {/* initial render will display incomplete to dos */}\r\n      {viewState ? (\r\n        <>\r\n          <div className='w-100 display-flex justify-space-between'>\r\n            <h2>\r\n              {userInfo.length\r\n                ? `Viewing Incomplete To Do's:`\r\n                : 'Create a To Do'}\r\n            </h2>\r\n            <button className='w-fit-content h-fit-content' onClick={() => { setViewState('') }}>View Completed To Do's</button>\r\n          </div>\r\n          {userInfo.map((todo) => {\r\n            return (\r\n              todo.completed ? ('') :\r\n                (<Card key={todo._id} border='dark' className='custom-card-width'>\r\n                  <Card.Body id={todo._id}>\r\n                    <Card.Title className='text-center'><h5>{todo.name}</h5></Card.Title>\r\n                    <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Edit ToDo {todo.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Edit TODO</button>\r\n                            {showModal ? <ToDoModal setShowModal={setShowModal} goalId={todo._id} /> : null}\r\n                          </div>\r\n                    <div className='display-flex justify-space-between'>\r\n                      <div className='w-fit-content display-flex flex-column mt-5'>\r\n                        <p className='small'>Priority: {todo.priority}</p>\r\n                        <Card.Text>Incomplete</Card.Text>\r\n                      </div>\r\n                      <div className='w-50 display-flex flex-column justify-space-around align-center'>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: true } })\r\n                          refetch()\r\n                        }}>Mark as Complete</button>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          removeTodo({ variables: { _id: todo._id } })\r\n                          refetch()\r\n                        }}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>))\r\n          })}\r\n        </>) :\r\n          // displaying completed to do's\r\n          (<>\r\n            <div className='w-100 display-flex justify-space-between'>\r\n              <h2>\r\n                {userInfo.length\r\n                  ? `Viewing Completed To Do's:`\r\n                  : 'Create a To Do'}\r\n              </h2>\r\n              <button className='w-fit-content h-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete To Do's</button>\r\n            </div>\r\n            {userInfo.map((todo) => {\r\n              return (\r\n                todo.completed ? (\r\n                  <Card key={todo._id} border='dark' className='custom-card-width'>\r\n                    <Card.Body id={todo._id}>\r\n                      <Card.Title>{todo.name}</Card.Title>\r\n                      <p className='small'>Priority: {todo.priority}</p>\r\n                      <Card.Text>Completed</Card.Text>\r\n                      <button className='w-fit-content' onClick={(e) => {\r\n                        updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: false } })\r\n                        refetch()\r\n                      }}>Completed!</button>\r\n                      <button className='w-fit-content' onClick={(e) => {\r\n                        removeTodo({ variables: { _id: todo._id } })\r\n                        refetch()\r\n                      }}>Remove</button>\r\n                    </Card.Body>\r\n                  </Card>) : ('')\r\n              )\r\n            })}\r\n          </>)}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TODOCard;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js",["137","138","139"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js",["140","141"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_TODO } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(EDIT_TODO);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Edit TODO</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of TODO\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js",["142","143"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_GOAL } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(EDIT_GOAL);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Edit Goal</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of goal\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js",["144","145"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_STEP } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Add Step</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of step\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":12,"column":8,"nodeType":"152","messageId":"153","endLine":12,"endColumn":14},{"ruleId":"150","severity":1,"message":"154","line":55,"column":9,"nodeType":"152","messageId":"153","endLine":55,"endColumn":20},{"ruleId":"150","severity":1,"message":"155","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"156","line":13,"column":11,"nodeType":"152","messageId":"153","endLine":13,"endColumn":18},{"ruleId":"157","severity":1,"message":"158","line":61,"column":33,"nodeType":"159","messageId":"160","endLine":61,"endColumn":35},{"ruleId":"150","severity":1,"message":"161","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"162","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":12},{"ruleId":"150","severity":1,"message":"156","line":12,"column":11,"nodeType":"152","messageId":"153","endLine":12,"endColumn":18},{"ruleId":"150","severity":1,"message":"163","line":8,"column":28,"nodeType":"152","messageId":"153","endLine":8,"endColumn":32},{"ruleId":"150","severity":1,"message":"163","line":11,"column":28,"nodeType":"152","messageId":"153","endLine":11,"endColumn":32},{"ruleId":"150","severity":1,"message":"156","line":8,"column":11,"nodeType":"152","messageId":"153","endLine":8,"endColumn":18},{"ruleId":"150","severity":1,"message":"164","line":8,"column":26,"nodeType":"152","messageId":"153","endLine":8,"endColumn":33},{"ruleId":"150","severity":1,"message":"156","line":10,"column":11,"nodeType":"152","messageId":"153","endLine":10,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":30,"column":25,"nodeType":"167","endLine":30,"endColumn":75},{"ruleId":"150","severity":1,"message":"156","line":12,"column":11,"nodeType":"152","messageId":"153","endLine":12,"endColumn":18},{"ruleId":"150","severity":1,"message":"156","line":11,"column":11,"nodeType":"152","messageId":"153","endLine":11,"endColumn":18},{"ruleId":"150","severity":1,"message":"168","line":19,"column":10,"nodeType":"152","messageId":"153","endLine":19,"endColumn":19},{"ruleId":"150","severity":1,"message":"169","line":19,"column":21,"nodeType":"152","messageId":"153","endLine":19,"endColumn":33},{"ruleId":"150","severity":1,"message":"170","line":17,"column":21,"nodeType":"152","messageId":"153","endLine":17,"endColumn":26},{"ruleId":"150","severity":1,"message":"163","line":17,"column":28,"nodeType":"152","messageId":"153","endLine":17,"endColumn":32},{"ruleId":"150","severity":1,"message":"170","line":17,"column":21,"nodeType":"152","messageId":"153","endLine":17,"endColumn":26},{"ruleId":"150","severity":1,"message":"163","line":17,"column":28,"nodeType":"152","messageId":"153","endLine":17,"endColumn":32},{"ruleId":"150","severity":1,"message":"170","line":17,"column":21,"nodeType":"152","messageId":"153","endLine":17,"endColumn":26},{"ruleId":"150","severity":1,"message":"163","line":17,"column":28,"nodeType":"152","messageId":"153","endLine":17,"endColumn":32},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'switchTheme' is assigned a value but never used.","'useState' is defined but never used.","'loading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'Auth' is defined but never used.","'data' is assigned a value but never used.","'refetch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]