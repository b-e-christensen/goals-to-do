[{"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\index.js":"1","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\App.js":"2","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js":"3","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js":"4","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js":"5","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js":"6","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js":"7","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js":"8","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js":"9","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProfilePage.js":"10","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js":"11","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js":"12","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js":"13","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js":"14","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js":"15","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js":"16","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js":"17","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js":"18","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js":"19","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js":"20","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js":"21","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProjectDashboard.js":"22","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Projects.js":"23","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\SingleProject.js":"24","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\CollaboratorModal.js":"25"},{"size":283,"mtime":1654353561256,"results":"26","hashOfConfig":"27"},{"size":3376,"mtime":1654707209646,"results":"28","hashOfConfig":"27"},{"size":286,"mtime":1654353561231,"results":"29","hashOfConfig":"27"},{"size":215,"mtime":1654353561228,"results":"30","hashOfConfig":"27"},{"size":397,"mtime":1654353561233,"results":"31","hashOfConfig":"27"},{"size":524,"mtime":1654372466373,"results":"32","hashOfConfig":"27"},{"size":2599,"mtime":1654366797367,"results":"33","hashOfConfig":"27"},{"size":513,"mtime":1654367030644,"results":"34","hashOfConfig":"27"},{"size":3672,"mtime":1654353561261,"results":"35","hashOfConfig":"27"},{"size":833,"mtime":1654605993366,"results":"36","hashOfConfig":"27"},{"size":2450,"mtime":1654372466368,"results":"37","hashOfConfig":"27"},{"size":3077,"mtime":1654372466367,"results":"38","hashOfConfig":"27"},{"size":1378,"mtime":1654643858396,"results":"39","hashOfConfig":"27"},{"size":1089,"mtime":1654366945734,"results":"40","hashOfConfig":"27"},{"size":3317,"mtime":1654717035936,"results":"41","hashOfConfig":"27"},{"size":4706,"mtime":1654605993363,"results":"42","hashOfConfig":"27"},{"size":12624,"mtime":1654605993360,"results":"43","hashOfConfig":"27"},{"size":2211,"mtime":1654353561234,"results":"44","hashOfConfig":"27"},{"size":1012,"mtime":1654699336290,"results":"45","hashOfConfig":"27"},{"size":2214,"mtime":1654605993364,"results":"46","hashOfConfig":"27"},{"size":2214,"mtime":1654605993361,"results":"47","hashOfConfig":"27"},{"size":522,"mtime":1654643961473,"results":"48","hashOfConfig":"27"},{"size":903,"mtime":1654698779405,"results":"49","hashOfConfig":"27"},{"size":6184,"mtime":1654716913185,"results":"50","hashOfConfig":"27"},{"size":2204,"mtime":1654712510523,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"twuus",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\index.js",[],["113","114"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\App.js",["115","116"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js",["117"],"import React, { useState } from \"react\";\r\n// import Start from './Start'\r\n// import Login from '../pages/Login';\r\nimport Navbar from '../components/Navbar';\r\nimport TODO from \"../components/TODO\";\r\nimport Auth from \"../utils/auth\";\r\n\r\n\r\nfunction Dashboard() {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if(!token) {\r\n        window.location.href = \"/\"\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <Navbar />\r\n            <TODO />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProfilePage.js",["118","119"],"import React, { useState } from 'react';\r\n// import { useMutation } from '@apollo/client';\r\n// import { LOGIN_USER } from '../utils/mutations';\r\n\r\nconst ProfilePage = (props) => {\r\n    \r\n\r\n  return (\r\n    <div>\r\n        <div style={{\r\n            display:\"flex\",\r\n            justifyContent:\"space-around\",\r\n            margin:\"18px 0px\",\r\n        }}>\r\n            <img style={{width:\"160px\",height:\"160px\",borderRadius:\"80px\"}}\r\n            src=\"https://media.istockphoto.com/photos/happy-corn-cartoon-character-laughing-joyfully-waving-hands-smiling-picture-id489224645?b=1&k=20&m=489224645&s=170667a&w=0&h=Wz4wN2hIlWSMFW2LiA3Tmakqw4NQoAFm356sucsYAMY=\"\r\n            />\r\n        </div>\r\n        <div>\r\n            <h4>\r\n                Corn Knee\r\n            </h4>\r\n        </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ProfilePage;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js",["120"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../utils/mutations';\r\nimport TODOCard from './TODOCard';\r\n\r\nconst Todo = (props) => {\r\n  const [formState, setFormState] = useState({ name: '', priority: '' });\r\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addTodo({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\r\n          <div className=\"card-body\">\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Name of todo\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  value={formState.todo}\r\n                  onChange={handleChange}\r\n                />\r\n                <label>\r\n                  Priority\r\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\r\n                    <option value=\"High\">High</option>\r\n                    <option value=\"Medium\">Medium</option>\r\n                    <option value=\"Low\">Low</option>\r\n                  </select>\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div> \r\n        <TODOCard />\r\n       \r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js",["121"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_GOAL } from '../utils/mutations';\r\nimport GoalCard from './GoalCard'\r\n// Here we are importing a CSS file as a dependency\r\nimport '../styles/Header.css';\r\n\r\nfunction Goals() {\r\n\r\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\r\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addGoal({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n      priority: 'Low',\r\n      completeByDate: ''\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\r\n          <div className=\"card-body\">\r\n\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Name of goal\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  value={formState.goal}\r\n                  onChange={handleChange}\r\n                />\r\n                <label>\r\n                  Priority\r\n                  <select\r\n                    className=\"form-input\"\r\n                    placeholder=\"Priority\"\r\n                    name=\"priority\"\r\n                    value={formState.priority}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Low'>Low</option>\r\n                    <option value='Medium'>Medium</option>\r\n                    <option value='High'>High</option>\r\n                  </select>\r\n                </label>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Date to complete by\"\r\n                  name=\"completeByDate\"\r\n                  type=\"date\"\r\n                  value={formState.completeByDate}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-info\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <GoalCard />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Goals;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js",["122"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/Navbar.css';\r\nimport Auth from '../utils/auth';\r\nimport ThemeSVG from '../styles/images/theme.svg'\r\nimport useLocalStorage from 'use-local-storage'\r\n\r\n// In Navbar, we can assign a style from an object by using curly braces\r\nfunction Navbar({ currentPage, handlePageChange }) {\r\n  const defaultDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  const [theme, setTheme] = useLocalStorage('theme', defaultDark ? 'dark' : 'light');\r\n  const el = document.getElementById('root')\r\n  el.classList.add(`${theme}`)\r\n  \r\n  const switchTheme = () => {\r\n    el.classList.remove(`${theme}`)\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='nav-card'>\r\n      <div className='nav-card-header'>\r\n        <Link to=\"/todos\">To Do</Link>\r\n        <Link to=\"/goals\">Goals</Link>\r\n        <Link to=\"/projects\">Projects</Link>\r\n        <button aria-label=\"Changes light and dark mode\" id=\"darkmode-button\" className=\"nav-link-dark\" onClick={switchTheme}>\r\n                        <img src={ThemeSVG} className=\"nav-link-dark-img\"></img>\r\n                        </button>\r\n        <button onClick={Auth.logout} className=\"logout-btn\">Logout</button>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js",["123"],"import React, { useEffect, useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { GET_USER_ALL } from '../utils/queries'\r\nimport ToDoModal from './ToDoModal'\r\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\r\n\r\nconst TODOCard = (props) => {\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [updateTodo] = useMutation(UPDATE_TODO);\r\n  const [removeTodo] = useMutation(REMOVE_TODO);\r\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  })\r\n\r\n  const userInfo = data?.getUser.todos || [];\r\n\r\n  const openModal = () => {\r\n    setShowModal(true)\r\n  }\r\n\r\n  const [viewState, setViewState] = useState('incomplete')\r\n\r\n\r\n  return (\r\n    <Container className='custom-cont-alter' data-count={props.count}>\r\n      {/* initial render will display incomplete to dos */}\r\n      {viewState ? (\r\n        <>\r\n          <div className='w-100 display-flex justify-space-between'>\r\n            <h2>\r\n              {userInfo.length\r\n                ? `Viewing Incomplete To Do's:`\r\n                : 'Create a To Do'}\r\n            </h2>\r\n            <button className='w-fit-content h-fit-content' onClick={() => { setViewState('') }}>View Completed To Do's</button>\r\n          </div>\r\n          {userInfo.map((todo) => {\r\n            return (\r\n              todo.completed ? ('') :\r\n                (<Card key={todo._id} border='dark' className='custom-card-width'>\r\n                  <Card.Body id={todo._id}>\r\n                    <Card.Title className='text-center'><h5>{todo.name}</h5></Card.Title>\r\n                    <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Edit ToDo {todo.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Edit TODO</button>\r\n                            {showModal ? <ToDoModal setShowModal={setShowModal} goalId={todo._id} /> : null}\r\n                          </div>\r\n                    <div className='display-flex justify-space-between'>\r\n                      <div className='w-fit-content display-flex flex-column mt-5'>\r\n                        <p className='small'>Priority: {todo.priority}</p>\r\n                        <Card.Text>Incomplete</Card.Text>\r\n                      </div>\r\n                      <div className='w-50 display-flex flex-column justify-space-around align-center'>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: true } })\r\n                          refetch()\r\n                        }}>Mark as Complete</button>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          removeTodo({ variables: { _id: todo._id } })\r\n                          refetch()\r\n                        }}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                  </Card.Body>\r\n                </Card>))\r\n          })}\r\n        </>) :\r\n          // displaying completed to do's\r\n          (<>\r\n            <div className='w-100 display-flex justify-space-between'>\r\n              <h2>\r\n                {userInfo.length\r\n                  ? `Viewing Completed To Do's:`\r\n                  : 'Create a To Do'}\r\n              </h2>\r\n              <button className='w-fit-content h-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete To Do's</button>\r\n            </div>\r\n            {userInfo.map((todo) => {\r\n              return (\r\n                todo.completed ? (\r\n                  <Card key={todo._id} border='dark' className='custom-card-width'>\r\n                    <Card.Body id={todo._id}>\r\n                      <Card.Title>{todo.name}</Card.Title>\r\n                      <p className='small'>Priority: {todo.priority}</p>\r\n                      <Card.Text>Completed</Card.Text>\r\n                      <button className='w-fit-content' onClick={(e) => {\r\n                        updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: false } })\r\n                        refetch()\r\n                      }}>Completed!</button>\r\n                      <button className='w-fit-content' onClick={(e) => {\r\n                        removeTodo({ variables: { _id: todo._id } })\r\n                        refetch()\r\n                      }}>Remove</button>\r\n                    </Card.Body>\r\n                  </Card>) : ('')\r\n              )\r\n            })}\r\n          </>)}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TODOCard;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js",["124","125","126"],"import React, { useEffect, useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { GET_USER_ALL } from '../utils/queries'\r\nimport StepModal from './StepModal'\r\nimport GoalsModal from './GoalsModal'\r\nimport { UPDATE_STEP, REMOVE_STEP, UPDATE_GOAL, REMOVE_GOAL } from '../utils/mutations';\r\n\r\n\r\nconst GoalCard = (props) => {\r\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  })\r\n\r\n  const userInfo = data?.getUser.goals || [];\r\n\r\n  const [userState, setUserState] = useState([...userInfo])\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [stepState, setStepState] = useState([])\r\n  const [viewState, setViewState] = useState('incomplete')\r\n\r\n  const [updateStep] = useMutation(UPDATE_STEP);\r\n  const [removeStep] = useMutation(REMOVE_STEP);\r\n  const [updateGoal] = useMutation(UPDATE_GOAL)\r\n  const [removeGoal] = useMutation(REMOVE_GOAL)\r\n\r\n  let stepArray = []\r\n\r\n  if (stepState[0]) {\r\n    stepArray = stepState\r\n  } else {\r\n    stepArray = Object.keys(stepState)\r\n  }\r\n\r\n  const openModal = () => {\r\n    setShowModal(true)\r\n  }\r\n\r\n  const showSteps = (goalId) => {\r\n    setStepState({\r\n      ...stepState,\r\n      [goalId]: { step: true }\r\n    })\r\n  }\r\n\r\n  const closeSteps = (goalId) => {\r\n    const steps = stepArray.filter((step) => step !== goalId)\r\n    setStepState([...steps])\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {/* initial render will display incomplete goals */}\r\n      {viewState ? (\r\n        <>\r\n          <div className='display-flex justify-space-between'>\r\n            <h2>\r\n              {userInfo.length\r\n                ? `Viewing Incomplete Goals:`\r\n                : 'Create a Goal'}\r\n            </h2>\r\n            <button className='w-fit-content' onClick={() => { setViewState('') }}>View Completed Goals</button>\r\n          </div>\r\n          {userInfo.map((goal) => {\r\n            return (\r\n              goal.completed ? ('') : (\r\n                <Card key={goal._id} border='dark'>\r\n                  <Card.Body>\r\n                    <Card.Title className='text-center'>\r\n                      <h5>{goal.name}</h5>\r\n                    </Card.Title>\r\n                    <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Step(s) to complete {goal.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Edit Goal</button>\r\n                            {showModal ? <GoalsModal setShowModal={setShowModal} goalId={goal._id} /> : null}\r\n                          </div>\r\n                    <div className='display-flex justify-space-between'>\r\n                      <Card.Text>\r\n                        <div className='w-fit-content display-flex flex-column mt-5'>\r\n                          <p className='mb-0'>Priority: {goal.priority}</p>\r\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\r\n                          <p>Steps: {goal.steps.length}</p>\r\n                        </div>\r\n                      </Card.Text>\r\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\r\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\r\n                          refetch()\r\n                        }}>Mark as Complete</button>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          removeGoal({ variables: { _id: goal._id } })\r\n                          refetch()\r\n                        }}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                    {stepArray.includes(goal._id) ? (\r\n                      <>\r\n                        <div key={goal._id} className='mt-3 ml-5'>\r\n                          <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Step(s) to complete {goal.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\r\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\r\n                          </div>\r\n                          <div className='display-flex flex-column'>\r\n                            {goal.steps.map((step) => (\r\n                              step.completed ? (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\r\n                                      refetch()\r\n                                    }}>Completed!</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              ) : (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\r\n                                      refetch()\r\n                                    }}>Mark Complete</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                            ))}\r\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\r\n                          </div>\r\n                        </div>\r\n                      </>) : ('')}\r\n                  </Card.Body>\r\n                </Card>\r\n              ))\r\n          })}\r\n\r\n        </>) :\r\n        // displays all the completed goals\r\n        (<>\r\n          <div className='display-flex justify-space-between'>\r\n            <h2>\r\n              {userInfo.length\r\n                ? `Viewing Completed Goals:`\r\n                : 'Create a Goal'}\r\n            </h2>\r\n            <button className='w-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete Goals</button>\r\n          </div>\r\n          {userInfo.map((goal) => {\r\n            return (\r\n              goal.completed ? (\r\n                <Card key={goal._id} border='dark'>\r\n                  <Card.Body>\r\n                    <Card.Title className='text-center'>\r\n                      <h5>{goal.name}</h5>\r\n                    </Card.Title>\r\n                    <div className='display-flex justify-space-between'>\r\n                      <Card.Text>\r\n                        <div className='w-fit-content display-flex flex-column mt-5'>\r\n                          <p className='mb-0'>Priority: {goal.priority}</p>\r\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\r\n                          <p>Steps: {goal.steps.length}</p>\r\n                        </div>\r\n                      </Card.Text>\r\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\r\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\r\n                          refetch()\r\n                        }}>Completed!</button>\r\n                        <button className='w-fit-content' onClick={(e) => {\r\n                          removeGoal({ variables: { _id: goal._id } })\r\n                          refetch()\r\n                        }}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                    {stepArray.includes(goal._id) ? (\r\n                      <>\r\n                        <div key={goal._id} className='mt-3 ml-5'>\r\n                          <div className='b-border display-flex justify-space-between'>\r\n                            <h6>Step(s) to complete {goal.name}</h6>\r\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\r\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\r\n                          </div>\r\n                          <div className='display-flex flex-column'>\r\n                            {goal.steps.map((step) => (\r\n                              step.completed ? (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\r\n                                      refetch()\r\n                                    }}>Completed!</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              ) : (\r\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\r\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\r\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\r\n                                      refetch()\r\n                                    }}>Mark Complete</button>\r\n                                    <button className='w-fit-content' onClick={(e) => {\r\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\r\n                                      refetch()\r\n                                    }}>Remove</button>\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                            ))}\r\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\r\n                          </div>\r\n                        </div>\r\n                      </>) : ('')}\r\n                  </Card.Body>\r\n                </Card>\r\n              ) : (''))\r\n          })}\r\n        </>)}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GoalCard;\r\n","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js",["127","128"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_STEP } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Add Step</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of step\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js",["129","130"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_TODO } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(EDIT_TODO);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Edit TODO</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of TODO\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js",["131","132"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_GOAL } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(EDIT_GOAL);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Edit Goal</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of goal\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\pages\\ProjectDashboard.js",[],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\Projects.js",["133","134","135"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\SingleProject.js",["136","137","138","139"],"C:\\Users\\bener\\code\\projects\\goals-to-do\\client\\src\\components\\CollaboratorModal.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":12,"column":8,"nodeType":"146","messageId":"147","endLine":12,"endColumn":14},{"ruleId":"144","severity":1,"message":"148","line":55,"column":9,"nodeType":"146","messageId":"147","endLine":55,"endColumn":20},{"ruleId":"144","severity":1,"message":"149","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"149","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"151","line":15,"column":13,"nodeType":"152","endLine":17,"endColumn":15},{"ruleId":"144","severity":1,"message":"153","line":8,"column":28,"nodeType":"146","messageId":"147","endLine":8,"endColumn":32},{"ruleId":"144","severity":1,"message":"153","line":11,"column":28,"nodeType":"146","messageId":"147","endLine":11,"endColumn":32},{"ruleId":"150","severity":1,"message":"151","line":29,"column":25,"nodeType":"152","endLine":29,"endColumn":75},{"ruleId":"144","severity":1,"message":"154","line":12,"column":11,"nodeType":"146","messageId":"147","endLine":12,"endColumn":18},{"ruleId":"144","severity":1,"message":"154","line":11,"column":11,"nodeType":"146","messageId":"147","endLine":11,"endColumn":18},{"ruleId":"144","severity":1,"message":"155","line":19,"column":10,"nodeType":"146","messageId":"147","endLine":19,"endColumn":19},{"ruleId":"144","severity":1,"message":"156","line":19,"column":21,"nodeType":"146","messageId":"147","endLine":19,"endColumn":33},{"ruleId":"144","severity":1,"message":"157","line":17,"column":21,"nodeType":"146","messageId":"147","endLine":17,"endColumn":26},{"ruleId":"144","severity":1,"message":"153","line":17,"column":28,"nodeType":"146","messageId":"147","endLine":17,"endColumn":32},{"ruleId":"144","severity":1,"message":"157","line":17,"column":21,"nodeType":"146","messageId":"147","endLine":17,"endColumn":26},{"ruleId":"144","severity":1,"message":"153","line":17,"column":28,"nodeType":"146","messageId":"147","endLine":17,"endColumn":32},{"ruleId":"144","severity":1,"message":"157","line":17,"column":21,"nodeType":"146","messageId":"147","endLine":17,"endColumn":26},{"ruleId":"144","severity":1,"message":"153","line":17,"column":28,"nodeType":"146","messageId":"147","endLine":17,"endColumn":32},{"ruleId":"144","severity":1,"message":"149","line":2,"column":17,"nodeType":"146","messageId":"147","endLine":2,"endColumn":25},{"ruleId":"144","severity":1,"message":"154","line":9,"column":11,"nodeType":"146","messageId":"147","endLine":9,"endColumn":18},{"ruleId":"144","severity":1,"message":"158","line":9,"column":26,"nodeType":"146","messageId":"147","endLine":9,"endColumn":33},{"ruleId":"144","severity":1,"message":"159","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":19},{"ruleId":"144","severity":1,"message":"160","line":4,"column":21,"nodeType":"146","messageId":"147","endLine":4,"endColumn":25},{"ruleId":"144","severity":1,"message":"154","line":12,"column":11,"nodeType":"146","messageId":"147","endLine":12,"endColumn":18},{"ruleId":"161","severity":1,"message":"162","line":54,"column":33,"nodeType":"163","messageId":"164","endLine":54,"endColumn":35},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'switchTheme' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used.","'refetch' is assigned a value but never used.","'Container' is defined but never used.","'Card' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]