[{"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\index.js":"1","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\App.js":"2","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js":"3","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js":"4","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js":"5","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js":"6","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js":"7","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js":"8","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js":"9","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js":"10","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js":"11","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js":"12","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js":"13","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js":"14","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js":"15","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js":"16","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js":"17","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js":"18","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js":"19"},{"size":270,"mtime":1654136270619,"results":"20","hashOfConfig":"21"},{"size":2308,"mtime":1654562626251,"results":"22","hashOfConfig":"21"},{"size":2505,"mtime":1654562626257,"results":"23","hashOfConfig":"21"},{"size":272,"mtime":1654136270616,"results":"24","hashOfConfig":"21"},{"size":202,"mtime":1654136270615,"results":"25","hashOfConfig":"21"},{"size":3557,"mtime":1654136270621,"results":"26","hashOfConfig":"21"},{"size":382,"mtime":1654136270617,"results":"27","hashOfConfig":"21"},{"size":532,"mtime":1654562626254,"results":"28","hashOfConfig":"21"},{"size":2985,"mtime":1654563046506,"results":"29","hashOfConfig":"21"},{"size":2365,"mtime":1654562626254,"results":"30","hashOfConfig":"21"},{"size":2571,"mtime":1654562626259,"results":"31","hashOfConfig":"21"},{"size":1048,"mtime":1654562626258,"results":"32","hashOfConfig":"21"},{"size":375,"mtime":1654136270627,"results":"33","hashOfConfig":"21"},{"size":12382,"mtime":1654566744256,"results":"34","hashOfConfig":"21"},{"size":4073,"mtime":1654562626255,"results":"35","hashOfConfig":"21"},{"size":2134,"mtime":1654136270617,"results":"36","hashOfConfig":"21"},{"size":501,"mtime":1654562626257,"results":"37","hashOfConfig":"21"},{"size":490,"mtime":1654562626256,"results":"38","hashOfConfig":"21"},{"size":2214,"mtime":1654484494060,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ym5k2z",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\index.js",[],["85","86"],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\App.js",["87"],"import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// Custom components and page loads \nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './pages/Login'\nimport Signup from './pages/Signup'\nimport Start from './components/Start'\nimport TodoDashboard from './pages/TodoDashboard';\nimport GoalDashboard from './pages/GoalDashboard'\n//import Auth from './utils/auth';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={<Start />}\n              />\n              <Route\n                path=\"/login\"\n                element={<Login />}\n              />\n              <Route\n                path=\"/signup\"\n                element={<Signup />}\n              />\n              <Route\n                path=\"/todos\"\n                element={<TodoDashboard />}\n              />\n              <Route\n                path=\"/goals\"\n                element={<GoalDashboard />}\n              />\n            </Routes>\n          </div>\n          {/* <Footer /> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js",["88","89"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_GOAL, EDIT_GOAL } from '../utils/mutations';\nimport GoalCard from './GoalCard'\n// Here we are importing a CSS file as a dependency\nimport '../styles/Header.css';\n\nfunction Goals() {\n\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addGoal({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: 'Low',\n      completeByDate: ''\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\n          <div className=\"card-body\">\n\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of goal\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.goal}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select\n                    className=\"form-input\"\n                    placeholder=\"Priority\"\n                    name=\"priority\"\n                    value={formState.priority}\n                    onChange={handleChange}\n                  >\n                    <option value='Low'>Low</option>\n                    <option value='Medium'>Medium</option>\n                    <option value='High'>High</option>\n                  </select>\n                </label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Date to complete by\"\n                  name=\"completeByDate\"\n                  type=\"date\"\n                  value={formState.completeByDate}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <GoalCard />\n      </div>\n    </main>\n  );\n}\n\nexport default Goals;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js",["90"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_TODO } from '../utils/mutations';\nimport TODOCard from './TODOCard';\n\nconst Todo = (props) => {\n  const [formState, setFormState] = useState({ name: '', priority: '' });\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addTodo({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\n          <div className=\"card-body\">\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of todo\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.todo}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\n                    <option value=\"High\">High</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Low\">Low</option>\n                  </select>\n                </label>\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div> \n        <TODOCard />\n       \n      </div>\n    </main>\n  );\n};\n\nexport default Todo;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js",["91","92","93"],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js",["94"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\n\nconst TODOCard = (props) => {\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [removeTodo] = useMutation(REMOVE_TODO);\n\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.todos || [];\n\n  const [viewState, setViewState] = useState('incomplete')\n\n\n  return (\n    <Container className='custom-cont-alter' data-count={props.count}>\n      {/* initial render will display incomplete to dos */}\n      {viewState ? (\n        <>\n          <div className='w-100 display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Incomplete To Do's:`\n                : 'Create a To Do'}\n            </h2>\n            <button className='w-fit-content h-fit-content' onClick={() => { setViewState('') }}>View Completed To Do's</button>\n          </div>\n          {userInfo.map((todo) => {\n            return (\n              todo.completed ? ('') :\n                (<Card key={todo._id} border='dark' className='custom-card-width'>\n                  <Card.Body id={todo._id}>\n                    <Card.Title className='text-center'><h5>{todo.name}</h5></Card.Title>\n                    <div className='display-flex justify-space-between'>\n                      <div className='w-fit-content display-flex flex-column mt-5'>\n                        <p className='small'>Priority: {todo.priority}</p>\n                        <Card.Text>Incomplete</Card.Text>\n                      </div>\n                      <div className='w-50 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: true } })\n                          refetch()\n                        }}>Mark as Complete</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeTodo({ variables: { _id: todo._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                  </Card.Body>\n                </Card>))\n          })}\n        </>) :\n          // displaying completed to do's\n          (<>\n            <div className='w-100 display-flex justify-space-between'>\n              <h2>\n                {userInfo.length\n                  ? `Viewing Completed To Do's:`\n                  : 'Create a To Do'}\n              </h2>\n              <button className='w-fit-content h-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete To Do's</button>\n            </div>\n            {userInfo.map((todo) => {\n              return (\n                todo.completed ? (\n                  <Card key={todo._id} border='dark' className='custom-card-width'>\n                    <Card.Body id={todo._id}>\n                      <Card.Title>{todo.name}</Card.Title>\n                      <p className='small'>Priority: {todo.priority}</p>\n                      <Card.Text>Completed</Card.Text>\n                      <button className='w-fit-content' onClick={(e) => {\n                        updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: false } })\n                        refetch()\n                      }}>Completed!</button>\n                      <button className='w-fit-content' onClick={(e) => {\n                        removeTodo({ variables: { _id: todo._id } })\n                        refetch()\n                      }}>Remove</button>\n                    </Card.Body>\n                  </Card>) : ('')\n              )\n            })}\n          </>)}\n    </Container>\n  );\n};\n\nexport default TODOCard;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js",["95","96"],"import React, { useRef, useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { useMutation } from '@apollo/client';\nimport { ADD_STEP } from '../utils/mutations';\n\nconst StepModal = ({ setShowModal, goalId }) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n  const closeModal = (e) => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  };\n\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\n\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addStep({\n        variables: { ...formState },\n      });\n      console.log(formState);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n    });\n  };\n\n  //render the modal JSX in the portal div.\n  return ReactDom.createPortal(\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\n      <div className=\"modal display-flex flex-column\">\n        <h5 className='m-3'>Add Step</h5>\n        <form className='w-75' onSubmit={handleFormSubmit}>\n          <input\n            className=\"form-input\"\n            placeholder=\"Name of step\"\n            name=\"name\"\n            type=\"text\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n          <button\n            className=\"btn btn-block btn-info\"\n            style={{ cursor: 'pointer' }}\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\n      </div>\n    </div>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default StepModal;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js",["97"],"import React, { useState } from \"react\";\n// import Start from './Start'\n// import Login from '../pages/Login';\nimport Navbar from '../components/Navbar';\nimport TODO from \"../components/TODO\";\nimport Auth from \"../utils/auth\";\n\n\nfunction Dashboard() {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if(!token) {\n        window.location.href = \"/\"\n    }\n\n    return (\n        <section>\n            <Navbar />\n            <TODO />\n        </section>\n    );\n}\n\nexport default Dashboard;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js",["98","99"],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":12,"column":8,"nodeType":"106","messageId":"107","endLine":12,"endColumn":14},{"ruleId":"104","severity":1,"message":"108","line":3,"column":20,"nodeType":"106","messageId":"107","endLine":3,"endColumn":29},{"ruleId":"104","severity":1,"message":"109","line":11,"column":28,"nodeType":"106","messageId":"107","endLine":11,"endColumn":32},{"ruleId":"104","severity":1,"message":"109","line":8,"column":28,"nodeType":"106","messageId":"107","endLine":8,"endColumn":32},{"ruleId":"104","severity":1,"message":"110","line":11,"column":11,"nodeType":"106","messageId":"107","endLine":11,"endColumn":18},{"ruleId":"104","severity":1,"message":"111","line":19,"column":10,"nodeType":"106","messageId":"107","endLine":19,"endColumn":19},{"ruleId":"104","severity":1,"message":"112","line":19,"column":21,"nodeType":"106","messageId":"107","endLine":19,"endColumn":33},{"ruleId":"104","severity":1,"message":"110","line":11,"column":11,"nodeType":"106","messageId":"107","endLine":11,"endColumn":18},{"ruleId":"104","severity":1,"message":"113","line":17,"column":21,"nodeType":"106","messageId":"107","endLine":17,"endColumn":26},{"ruleId":"104","severity":1,"message":"109","line":17,"column":28,"nodeType":"106","messageId":"107","endLine":17,"endColumn":32},{"ruleId":"104","severity":1,"message":"114","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"113","line":17,"column":21,"nodeType":"106","messageId":"107","endLine":17,"endColumn":26},{"ruleId":"104","severity":1,"message":"109","line":17,"column":28,"nodeType":"106","messageId":"107","endLine":17,"endColumn":32},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'EDIT_GOAL' is defined but never used.","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]