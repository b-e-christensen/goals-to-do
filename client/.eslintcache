[{"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\index.js":"1","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\App.js":"2","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js":"3","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js":"4","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js":"5","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js":"6","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js":"7","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js":"8","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js":"9","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\SingleProject.js":"10","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\ProfilePage.js":"11","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\ProjectDashboard.js":"12","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js":"13","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js":"14","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js":"15","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js":"16","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js":"17","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js":"18","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\CollaboratorModal.js":"19","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Projects.js":"20","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js":"21","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js":"22","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js":"23","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js":"24","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js":"25","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TaskCard.js":"26"},{"size":270,"mtime":1654577261035,"results":"27","hashOfConfig":"28"},{"size":3267,"mtime":1654733557352,"results":"29","hashOfConfig":"28"},{"size":202,"mtime":1654577261033,"results":"30","hashOfConfig":"28"},{"size":337,"mtime":1654735544790,"results":"31","hashOfConfig":"28"},{"size":382,"mtime":1654577261034,"results":"32","hashOfConfig":"28"},{"size":3557,"mtime":1654577261036,"results":"33","hashOfConfig":"28"},{"size":490,"mtime":1654577261036,"results":"34","hashOfConfig":"28"},{"size":2505,"mtime":1654577261036,"results":"35","hashOfConfig":"28"},{"size":501,"mtime":1654577261037,"results":"36","hashOfConfig":"28"},{"size":6107,"mtime":1654735544792,"results":"37","hashOfConfig":"28"},{"size":2673,"mtime":1654733557356,"results":"38","hashOfConfig":"28"},{"size":499,"mtime":1654733557357,"results":"39","hashOfConfig":"28"},{"size":2365,"mtime":1654577261034,"results":"40","hashOfConfig":"28"},{"size":2974,"mtime":1654577261033,"results":"41","hashOfConfig":"28"},{"size":1048,"mtime":1654577261038,"results":"42","hashOfConfig":"28"},{"size":1383,"mtime":1654733557354,"results":"43","hashOfConfig":"28"},{"size":3154,"mtime":1654736007482,"results":"44","hashOfConfig":"28"},{"size":972,"mtime":1654735544796,"results":"45","hashOfConfig":"28"},{"size":2127,"mtime":1654733557353,"results":"46","hashOfConfig":"28"},{"size":3208,"mtime":1654735544791,"results":"47","hashOfConfig":"28"},{"size":4600,"mtime":1654577261035,"results":"48","hashOfConfig":"28"},{"size":12384,"mtime":1654577261033,"results":"49","hashOfConfig":"28"},{"size":2137,"mtime":1654577261035,"results":"50","hashOfConfig":"28"},{"size":3134,"mtime":1654738673956,"results":"51","hashOfConfig":"28"},{"size":2134,"mtime":1654577261034,"results":"52","hashOfConfig":"28"},{"size":1601,"mtime":1654735544793,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1ym5k2z",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"56"},"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\index.js",[],["120","121"],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\App.js",["122","123"],"import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// Custom components and page loads \nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './pages/Login'\nimport ProfilePage from './pages/ProfilePage';\nimport Signup from './pages/Signup'\nimport Start from './components/Start'\nimport TodoDashboard from './pages/TodoDashboard';\nimport GoalDashboard from './pages/GoalDashboard'\nimport ProjectDashboard from './pages/ProjectDashboard'\nimport useLocalStorage from 'use-local-storage'\nimport SingleProject from './components/SingleProject';\n//import Auth from './utils/auth';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  const defaultDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [theme, setTheme] = useLocalStorage('theme', defaultDark ? 'dark' : 'light');\n  const el = document.getElementById('root')\n  el.classList.add(`${theme}`)\n\n  const switchTheme = () => {\n    el.classList.remove(`${theme}`)\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme)\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={<Start />}\n              />\n              <Route\n                path=\"/login\"\n                element={<Login />}\n              />\n              <Route\n                path=\"/signup\"\n                element={<Signup />}\n              />\n              <Route\n                path=\"/todos\"\n                element={<TodoDashboard />}\n              />\n              <Route\n                path=\"/goals\"\n                element={<GoalDashboard />}\n              />\n              <Route\n                path=\"/projects\"\n                element={<ProjectDashboard />}\n              />\n              <Route\n                path=\"/projects/:projectId\"\n                element={<SingleProject />}\n              />\n              <Route\n                path=\"/profile\"\n                element={<ProfilePage />}\n              />\n            </Routes>\n          </div>\n          {/* <Footer /> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js",["124"],"import React, { useState } from \"react\";\n// import Start from './Start'\n// import Login from '../pages/Login';\nimport Navbar from '../components/Navbar';\nimport TODO from \"../components/TODO\";\nimport Auth from \"../utils/auth\";\n\n\nfunction Dashboard() {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if(!token) {\n        window.location.href = \"/\"\n    }\n\n    return (\n        <section>\n            <Navbar />\n            <TODO />\n        </section>\n    );\n}\n\nexport default Dashboard;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\SingleProject.js",["125","126"],"import { useMutation, useQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { GET_SINGLE_PROJECT } from '../utils/queries';\nimport { useParams } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport CollaboratorModal from './CollaboratorModal'\nimport { ADD_TASK } from '../utils/mutations';\nimport TaskCard from './TaskCard';\n\nfunction SingleProject() {\n  const { projectId } = useParams()\n  console.log(projectId)\n  const { loading, data, refetch } = useQuery(GET_SINGLE_PROJECT, {\n    variables: { id: projectId },\n  })\n\n  const project = data?.getSingleProject || []\n  const collaborators = project.collaborators || []\n\n  useEffect(() => {\n    refetch()\n  })\n  \n  console.log(project)\n\n  const [formDisplayState, setFormDisplayState] = useState('collapsed')\n  const [formState, setFormState] = useState({ name: '', priority: 'Low' });\n  const [assigneesState, setAssigneesState] = useState([])\n\n  const [addTask] = useMutation(ADD_TASK)\n\n  const [showModal, setShowModal] = useState(false)\n\n  const openModal = () => {\n    setShowModal(true)\n  }\n\n  let assigneesArr = [...assigneesState]\n\n  console.log(assigneesArr)\n  console.log(assigneesState)\n\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  console.log(formState)\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    console.log([...assigneesState])\n    const arrOfObj = []\n    assigneesArr.map((assignee) => {\n      arrOfObj.push({\n        assignee\n      })\n    } )\n    console.log(arrOfObj)\n    try {\n      const { data } = await addTask({\n        variables: { \n          name: formState.name,\n          priority: formState.priority,\n          assignees: [...assigneesState],\n          projectId: projectId\n        },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: 'Low',\n      completeByDate: ''\n    });\n  };\n\n  const assigneesFunction = async (id) => {\n\n    const checkbox = document.getElementById(id)\n\n    if (checkbox.checked) {\n      setAssigneesState([\n        ...assigneesState,\n        checkbox.value\n      ])\n    } else if (!checkbox.checked) {\n      const assignees = assigneesArr.filter((assignee) => assignee !== checkbox.value)\n      setAssigneesState([...assignees])\n    }\n  }\n\n\n  return (\n    <>\n      <Navbar />\n      <div className='display-flex h-100'>\n        <div className='w-75 display-flex justify-center align-center'><h4 className='text-center'>{project.name}</h4></div>\n        <div className='w-25 overflow-scroll'>\n          <div className='display-flex justify-space-between mr-3 mt-3 align-items'><h4>Collaborators</h4><div className='plus radius' onClick={openModal}></div>\n            {showModal ? <CollaboratorModal setShowModal={setShowModal} projectId={projectId} /> : null}\n          </div>\n          {collaborators.map((collaborator) => {\n            return (\n              <div>\n                <p>{collaborator.name} - {collaborator.email}</p>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n\n      {formDisplayState ? (\n        <main className=\"flex-row justify-center mb-4\">\n          <div className=\"col-12 col-lg-10 text-center card-header bg-dark text-light p-2 display-flex justify-space-between align-center\">\n            <h4>Create A Task</h4>\n            <div className='plus radius' onClick={() => (setFormDisplayState(''))}></div>\n          </div>\n        </main>\n      ) : (\n        <main className=\"flex-row justify-center mb-4\">\n          <div className=\"col-12 col-lg-10\">\n            <div className=\"card\">\n              <div className=\"w-100 text-center card-header bg-dark text-light p-2 display-flex justify-space-between align-center\">\n                <h4>Create A Task</h4>\n                <div className='minus' onClick={() => (setFormDisplayState('collapsed'))}>X</div>\n              </div>\n              <div className=\"card-body\">\n\n                <form onSubmit={handleFormSubmit}>\n                  <input\n                    className=\"form-input\"\n                    placeholder=\"Name of task\"\n                    name=\"name\"\n                    type=\"text\"\n                    value={formState.task}\n                    onChange={handleChange}\n                  />\n                  <label>\n                    Priority\n                    <select\n                      className=\"form-input\"\n                      placeholder=\"Priority\"\n                      name=\"priority\"\n                      value={formState.priority}\n                      onChange={handleChange}\n                    >\n                      <option value='Low'>Low</option>\n                      <option value='Medium'>Medium</option>\n                      <option value='High'>High</option>\n                    </select>\n                  </label>\n                  <br></br>\n\n                  <label>Assign Collaborators</label>\n                  {collaborators.map((collaborator) => {\n                    return (\n                      <div className='ml-3'>\n                        <input type='checkbox'\n                          id={collaborator.email}\n                          name=\"assignees\"\n                          value={collaborator.name}\n                          onChange={(e) => assigneesFunction(collaborator.email)}></input>\n                        <label>{collaborator.name}</label><br></br>\n                      </div>\n                    )\n                  })}\n\n                  <button\n                    className=\"btn btn-block btn-info\"\n                    style={{ cursor: 'pointer' }}\n                    type=\"submit\"\n                  >\n                    Submit\n                  </button>\n                </form>\n\n\n              </div>\n            </div>\n            \n          </div>\n        </main>\n      )}\n        <TaskCard projectId={projectId}/>\n    </>\n  )\n}\n\nexport default SingleProject","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\ProfilePage.js",["127","128","129"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { UPDATE_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { GET_USER_ALL } from '../utils/queries'\nimport Navbar from '../components/Navbar'\n\nconst ProfilePage = (props) => {\n    const [formState, setFormState] = useState({ email: '', password: '' });\n  const [updateUser] = useMutation(UPDATE_USER);\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n  const userInfo = data?.getUser || {};\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      await updateUser({\n        variables: { ...formState },\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    setFormState({\n      email: '',\n      password: '',\n      username: '',\n    });\n    refetch()\n  };\n\n\n  return (\n  \n    <main className=\"flex-row justify-center mb-4\">\n        <Navbar/>\n        <div className=\"col-12 col-lg-10\">\n        {userInfo ? (    \n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Profile</h4>\n          <div className=\"card-body\">\n              <form onSubmit={handleFormSubmit}>\n                 <input\n                  className=\"form-input\"\n                  placeholder={userInfo.username}\n                  name=\"username\"\n                  type=\"username\"\n                  value={formState.username}\n                  onChange={handleChange}\n                />  \n                <input\n                  className=\"form-input\"\n                  placeholder={userInfo.email}\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n          </div>\n        </div>) : ('')\n}\n      </div>\n    </main>\n      \n  )};\n\nexport default ProfilePage;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\ProjectDashboard.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js",["130"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_TODO } from '../utils/mutations';\nimport TODOCard from './TODOCard';\n\nconst Todo = (props) => {\n  const [formState, setFormState] = useState({ name: '', priority: '' });\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addTodo({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\n          <div className=\"card-body\">\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of todo\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.todo}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\n                    <option value=\"High\">High</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Low\">Low</option>\n                  </select>\n                </label>\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div> \n        <TODOCard />\n       \n      </div>\n    </main>\n  );\n};\n\nexport default Todo;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js",["131"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_GOAL } from '../utils/mutations';\nimport GoalCard from './GoalCard'\n// Here we are importing a CSS file as a dependency\nimport '../styles/Header.css';\n\nfunction Goals() {\n\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addGoal({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: 'Low',\n      completeByDate: ''\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\n          <div className=\"card-body\">\n\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of goal\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.goal}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select\n                    className=\"form-input\"\n                    placeholder=\"Priority\"\n                    name=\"priority\"\n                    value={formState.priority}\n                    onChange={handleChange}\n                  >\n                    <option value='Low'>Low</option>\n                    <option value='Medium'>Medium</option>\n                    <option value='High'>High</option>\n                  </select>\n                </label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Date to complete by\"\n                  name=\"completeByDate\"\n                  type=\"date\"\n                  value={formState.completeByDate}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <GoalCard />\n      </div>\n    </main>\n  );\n}\n\nexport default Goals;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js",["132"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Navbar.css';\nimport Auth from '../utils/auth';\nimport ThemeSVG from '../styles/images/theme.svg'\nimport useLocalStorage from 'use-local-storage'\n\n// In Navbar, we can assign a style from an object by using curly braces\nfunction Navbar({ currentPage, handlePageChange }) {\n  const defaultDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [theme, setTheme] = useLocalStorage('theme', defaultDark ? 'dark' : 'light');\n  const el = document.getElementById('root')\n  el.classList.add(`${theme}`)\n  \n  const switchTheme = () => {\n    el.classList.remove(`${theme}`)\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme)\n  }\n\n\n  return (\n    <div className='nav-card'>\n      <div className='nav-card-header'>\n        <Link to=\"/todos\">To Do</Link>\n        <Link to=\"/goals\">Goals</Link>\n        <Link to=\"/projects\">Projects</Link>\n        <Link to=\"/profile\">Profile</Link>\n        <button aria-label=\"Changes light and dark mode\" id=\"darkmode-button\" className=\"nav-link-dark\" onClick={switchTheme}>\n                        <img src={ThemeSVG} className=\"nav-link-dark-img\"></img>\n                        </button>\n        <button onClick={Auth.logout} className=\"logout-btn\">Logout</button>\n        </div>\n\n    </div>\n  );\n}\n\nexport default Navbar;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\CollaboratorModal.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Projects.js",["133"],"import { useMutation, useQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { GET_PROJECTS } from '../utils/queries';\nimport { Container, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { ADD_PROJECT } from '../utils/mutations';\n\nfunction Projects() {\n\n  const { loading, data, refetch } = useQuery(GET_PROJECTS)\n  \n  const userInfo = data?.getUser.projects || []\n  const allData = data?.getUser || []\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const [formDisplayState, setFormDisplayState] = useState('collapsed')\n  const [formState, setFormState] = useState({ name: '' });\n  const [addProject] = useMutation(ADD_PROJECT)\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  console.log(formState)\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addProject({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n    // clear form values\n    setFormDisplayState('collapsed');\n  };\n\n  console.log(allData)\n  return (\n    <>\n      <div>\n        {formDisplayState ? (\n          <div className='flex-display flex-row justify-center align-center w-100 mt-4'>\n            <h4>Your Projects</h4>\n            <div className='plus radius ml-5' onClick={() => (setFormDisplayState(''))}></div>\n          </div>) : (\n          <main className=\"flex-row justify-center mb-4\">\n            <div className=\"col-12 col-lg-10\">\n            <h4 className='text-center mt-4'>Your Projects</h4>\n              <div className=\"card\">\n                <div className=\"w-100 text-center card-header bg-dark text-light p-2 display-flex justify-space-between align-center\">\n                  <h4>Create A Project</h4>\n                  <div className='minus' onClick={() => (setFormDisplayState('collapsed'))}>X</div>\n                </div>\n                <div className=\"card-body\">\n\n                  <form onSubmit={handleFormSubmit}>\n                    <input\n                      className=\"form-input\"\n                      placeholder=\"Name of task\"\n                      name=\"name\"\n                      type=\"text\"\n                      value={formState.task}\n                      onChange={handleChange}\n                    />\n                    <button\n                      className=\"btn btn-block btn-info\"\n                      style={{ cursor: 'pointer' }}\n                      type=\"submit\"\n                    >\n                      Submit\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </main>\n        )}\n      </div>\n      <Container>\n        {userInfo.map((project) => {\n          return (\n            <Card className='m-3 '>\n              <Link\n                to={`/projects/${project._id}`}>\n                <h5 className='m-2'>{project.name}</h5>\n              </Link>\n            </Card>\n          )\n        })}\n      </Container>\n    </>\n  )\n}\n\nexport default Projects","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js",["134"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport ToDoModal from './ToDoModal'\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\n\nconst TODOCard = (props) => {\n  const [showModal, setShowModal] = useState(false)\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [removeTodo] = useMutation(REMOVE_TODO);\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.todos || [];\n\n  const openModal = () => {\n    setShowModal(true)\n  }\n\n  const [viewState, setViewState] = useState('incomplete')\n\n\n  return (\n    <Container className='custom-cont-alter' data-count={props.count}>\n      {/* initial render will display incomplete to dos */}\n      {viewState ? (\n        <>\n          <div className='w-100 display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Incomplete To Do's:`\n                : 'Create a To Do'}\n            </h2>\n            <button className='w-fit-content h-fit-content' onClick={() => { setViewState('') }}>View Completed To Do's</button>\n          </div>\n          {userInfo.map((todo) => {\n            return (\n              todo.completed ? ('') :\n                (<Card key={todo._id} border='dark' className='custom-card-width'>\n                  <Card.Body id={todo._id}>\n                    <Card.Title className='text-center'><h5>{todo.name}</h5></Card.Title>\n                    <div className='b-border display-flex justify-space-between'>\n                            <h6>Edit ToDo {todo.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Edit TODO</button>\n                            {showModal ? <ToDoModal setShowModal={setShowModal} goalId={todo._id} /> : null}\n                          </div>\n                    <div className='display-flex justify-space-between'>\n                      <div className='w-fit-content display-flex flex-column mt-5'>\n                        <p className='small'>Priority: {todo.priority}</p>\n                        <Card.Text>Incomplete</Card.Text>\n                      </div>\n                      <div className='w-50 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: true } })\n                          refetch()\n                        }}>Mark as Complete</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeTodo({ variables: { _id: todo._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                  </Card.Body>\n                </Card>))\n          })}\n        </>) :\n          // displaying completed to do's\n          (<>\n            <div className='w-100 display-flex justify-space-between'>\n              <h2>\n                {userInfo.length\n                  ? `Viewing Completed To Do's:`\n                  : 'Create a To Do'}\n              </h2>\n              <button className='w-fit-content h-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete To Do's</button>\n            </div>\n            {userInfo.map((todo) => {\n              return (\n                todo.completed ? (\n                  <Card key={todo._id} border='dark' className='custom-card-width'>\n                    <Card.Body id={todo._id}>\n                      <Card.Title>{todo.name}</Card.Title>\n                      <p className='small'>Priority: {todo.priority}</p>\n                      <Card.Text>Completed</Card.Text>\n                      <button className='w-fit-content' onClick={(e) => {\n                        updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: false } })\n                        refetch()\n                      }}>Completed!</button>\n                      <button className='w-fit-content' onClick={(e) => {\n                        removeTodo({ variables: { _id: todo._id } })\n                        refetch()\n                      }}>Remove</button>\n                    </Card.Body>\n                  </Card>) : ('')\n              )\n            })}\n          </>)}\n    </Container>\n  );\n};\n\nexport default TODOCard;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js",["135","136","137"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport StepModal from './StepModal'\nimport GoalsModal from './GoalsModal'\nimport { UPDATE_STEP, REMOVE_STEP, UPDATE_GOAL, REMOVE_GOAL } from '../utils/mutations';\n\n\nconst GoalCard = (props) => {\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.goals || [];\n\n  const [userState, setUserState] = useState([...userInfo])\n  const [showModal, setShowModal] = useState(false)\n  const [stepState, setStepState] = useState([])\n  const [viewState, setViewState] = useState('incomplete')\n\n  const [updateStep] = useMutation(UPDATE_STEP);\n  const [removeStep] = useMutation(REMOVE_STEP);\n  const [updateGoal] = useMutation(UPDATE_GOAL)\n  const [removeGoal] = useMutation(REMOVE_GOAL)\n\n  let stepArray = []\n\n  if (stepState[0]) {\n    stepArray = stepState\n  } else {\n    stepArray = Object.keys(stepState)\n  }\n\n  const openModal = () => {\n    setShowModal(true)\n  }\n\n  const showSteps = (goalId) => {\n    setStepState({\n      ...stepState,\n      [goalId]: { step: true }\n    })\n  }\n\n  const closeSteps = (goalId) => {\n    const steps = stepArray.filter((step) => step !== goalId)\n    setStepState([...steps])\n  }\n\n  return (\n    <Container>\n      {/* initial render will display incomplete goals */}\n      {viewState ? (\n        <>\n          <div className='display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Incomplete Goals:`\n                : 'Create a Goal'}\n            </h2>\n            <button className='w-fit-content' onClick={() => { setViewState('') }}>View Completed Goals</button>\n          </div>\n          {userInfo.map((goal) => {\n            return (\n              goal.completed ? ('') : (\n                <Card key={goal._id} border='dark'>\n                  <Card.Body>\n                    <Card.Title className='text-center'>\n                      <h5>{goal.name}</h5>\n                    </Card.Title>\n                    <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Edit Goal</button>\n                            {showModal ? <GoalsModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                    <div className='display-flex justify-space-between'>\n                      <Card.Text>\n                        <div className='w-fit-content display-flex flex-column mt-5'>\n                          <p className='mb-0'>Priority: {goal.priority}</p>\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                          <p>Steps: {goal.steps.length}</p>\n                        </div>\n                      </Card.Text>\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\n                          refetch()\n                        }}>Mark as Complete</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeGoal({ variables: { _id: goal._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                    {stepArray.includes(goal._id) ? (\n                      <>\n                        <div key={goal._id} className='mt-3 ml-5'>\n                          <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                          <div className='display-flex flex-column'>\n                            {goal.steps.map((step) => (\n                              step.completed ? (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                      refetch()\n                                    }}>Completed!</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              ) : (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                      refetch()\n                                    }}>Mark Complete</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              )\n                            ))}\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                          </div>\n                        </div>\n                      </>) : ('')}\n                  </Card.Body>\n                </Card>\n              ))\n          })}\n\n        </>) :\n        // displays all the completed goals\n        (<>\n          <div className='display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Completed Goals:`\n                : 'Create a Goal'}\n            </h2>\n            <button className='w-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete Goals</button>\n          </div>\n          {userInfo.map((goal) => {\n            return (\n              goal.completed ? (\n                <Card key={goal._id} border='dark'>\n                  <Card.Body>\n                    <Card.Title className='text-center'>\n                      <h5>{goal.name}</h5>\n                    </Card.Title>\n                    <div className='display-flex justify-space-between'>\n                      <Card.Text>\n                        <div className='w-fit-content display-flex flex-column mt-5'>\n                          <p className='mb-0'>Priority: {goal.priority}</p>\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                          <p>Steps: {goal.steps.length}</p>\n                        </div>\n                      </Card.Text>\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\n                          refetch()\n                        }}>Completed!</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeGoal({ variables: { _id: goal._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                    {stepArray.includes(goal._id) ? (\n                      <>\n                        <div key={goal._id} className='mt-3 ml-5'>\n                          <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                          <div className='display-flex flex-column'>\n                            {goal.steps.map((step) => (\n                              step.completed ? (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                      refetch()\n                                    }}>Completed!</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              ) : (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                      refetch()\n                                    }}>Mark Complete</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              )\n                            ))}\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                          </div>\n                        </div>\n                      </>) : ('')}\n                  </Card.Body>\n                </Card>\n              ) : (''))\n          })}\n        </>)}\n    </Container>\n  );\n};\n\nexport default GoalCard;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js",["138","139"],"import React, { useRef, useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { useMutation } from '@apollo/client';\nimport { EDIT_TODO } from '../utils/mutations';\n\nconst StepModal = ({ setShowModal, goalId }) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n  const closeModal = (e) => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  };\n\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\n  const [addStep, { error, data }] = useMutation(EDIT_TODO);\n\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addStep({\n        variables: { ...formState },\n      });\n      console.log(formState);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n    });\n  };\n\n  //render the modal JSX in the portal div.\n  return ReactDom.createPortal(\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\n      <div className=\"modal display-flex flex-column\">\n        <h5 className='m-3'>Edit TODO</h5>\n        <form className='w-75' onSubmit={handleFormSubmit}>\n          <input\n            className=\"form-input\"\n            placeholder=\"Name of TODO\"\n            name=\"name\"\n            type=\"text\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n          <button\n            className=\"btn btn-block btn-info\"\n            style={{ cursor: 'pointer' }}\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\n      </div>\n    </div>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default StepModal;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js",["140","141"],"import React, { useRef, useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { useMutation } from '@apollo/client';\nimport { ADD_STEP } from '../utils/mutations';\n\nconst StepModal = ({ setShowModal, goalId }) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n  const closeModal = (e) => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  };\n\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\n\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addStep({\n        variables: { ...formState },\n      });\n      console.log(formState);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n    });\n  };\n\n  //render the modal JSX in the portal div.\n  return ReactDom.createPortal(\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\n      <div className=\"modal display-flex flex-column\">\n        <h5 className='m-3'>Add Step</h5>\n        <form className='w-75' onSubmit={handleFormSubmit}>\n          <input\n            className=\"form-input\"\n            placeholder=\"Name of step\"\n            name=\"name\"\n            type=\"text\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n          <button\n            className=\"btn btn-block btn-info\"\n            style={{ cursor: 'pointer' }}\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\n      </div>\n    </div>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default StepModal;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TaskCard.js",["142","143"],"import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Card, Container } from 'react-bootstrap';\nimport { GET_SINGLE_PROJECT } from '../utils/queries';\n\nfunction TaskCard({ projectId }) {\n\n  const { loading, data, refetch } = useQuery(GET_SINGLE_PROJECT, {\n    variables: { id: projectId },\n  })\n\n  const tasks = data?.getSingleProject.tasks || []\n  console.log(tasks)\n\n\n  return (\n    <>\n      <Container className='display-flex justify-center align-center flex-column'>\n        {tasks.map((task) => {\n          return (\n            <Card border='dark' className='custom-card-width'>\n              <Card.Body>\n                <Card.Title className='display-flex align-center justify-center'>\n                  <h5>{task.name} - <span className='created-by'>created by</span> {task.creator}</h5>\n                </Card.Title>\n                <Card.Text>\n                  <div className='w-fit-content display-flex flex-column mt-5'>\n                    <h6 className='mb-0'>Priority: {task.priority}</h6>\n                    {task.assignees[0] ? (\n                      <div>\n                      <h6>This task has been assigned to:</h6>\n                      {task.assignees.map((assignee) => {\n                        return (\n                          <p className='mb-0 ml-2'>-- {assignee}</p>\n                        )\n                      })}\n                    </div>) : ('')}\n\n\n\n                  </div>\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          )\n        })}\n\n\n\n      </Container>\n\n    </>\n  )\n}\n\nexport default TaskCard",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":12,"column":8,"nodeType":"150","messageId":"151","endLine":12,"endColumn":14},{"ruleId":"148","severity":1,"message":"152","line":55,"column":9,"nodeType":"150","messageId":"151","endLine":55,"endColumn":20},{"ruleId":"148","severity":1,"message":"153","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"154","line":13,"column":11,"nodeType":"150","messageId":"151","endLine":13,"endColumn":18},{"ruleId":"155","severity":1,"message":"156","line":61,"column":33,"nodeType":"157","messageId":"158","endLine":61,"endColumn":35},{"ruleId":"148","severity":1,"message":"159","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":14},{"ruleId":"148","severity":1,"message":"160","line":5,"column":8,"nodeType":"150","messageId":"151","endLine":5,"endColumn":12},{"ruleId":"148","severity":1,"message":"154","line":12,"column":11,"nodeType":"150","messageId":"151","endLine":12,"endColumn":18},{"ruleId":"148","severity":1,"message":"161","line":8,"column":28,"nodeType":"150","messageId":"151","endLine":8,"endColumn":32},{"ruleId":"148","severity":1,"message":"161","line":11,"column":28,"nodeType":"150","messageId":"151","endLine":11,"endColumn":32},{"ruleId":"162","severity":1,"message":"163","line":30,"column":25,"nodeType":"164","endLine":30,"endColumn":75},{"ruleId":"148","severity":1,"message":"154","line":10,"column":11,"nodeType":"150","messageId":"151","endLine":10,"endColumn":18},{"ruleId":"148","severity":1,"message":"154","line":12,"column":11,"nodeType":"150","messageId":"151","endLine":12,"endColumn":18},{"ruleId":"148","severity":1,"message":"154","line":11,"column":11,"nodeType":"150","messageId":"151","endLine":11,"endColumn":18},{"ruleId":"148","severity":1,"message":"165","line":19,"column":10,"nodeType":"150","messageId":"151","endLine":19,"endColumn":19},{"ruleId":"148","severity":1,"message":"166","line":19,"column":21,"nodeType":"150","messageId":"151","endLine":19,"endColumn":33},{"ruleId":"148","severity":1,"message":"167","line":17,"column":21,"nodeType":"150","messageId":"151","endLine":17,"endColumn":26},{"ruleId":"148","severity":1,"message":"161","line":17,"column":28,"nodeType":"150","messageId":"151","endLine":17,"endColumn":32},{"ruleId":"148","severity":1,"message":"167","line":17,"column":21,"nodeType":"150","messageId":"151","endLine":17,"endColumn":26},{"ruleId":"148","severity":1,"message":"161","line":17,"column":28,"nodeType":"150","messageId":"151","endLine":17,"endColumn":32},{"ruleId":"148","severity":1,"message":"154","line":8,"column":11,"nodeType":"150","messageId":"151","endLine":8,"endColumn":18},{"ruleId":"148","severity":1,"message":"168","line":8,"column":26,"nodeType":"150","messageId":"151","endLine":8,"endColumn":33},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'switchTheme' is assigned a value but never used.","'useState' is defined but never used.","'loading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'Auth' is defined but never used.","'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used.","'refetch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]