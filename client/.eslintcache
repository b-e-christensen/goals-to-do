[{"/Users/kvc/code/projects/goals-to-do/client/src/index.js":"1","/Users/kvc/code/projects/goals-to-do/client/src/App.js":"2","/Users/kvc/code/projects/goals-to-do/client/src/components/Header.js":"3","/Users/kvc/code/projects/goals-to-do/client/src/components/Start.js":"4","/Users/kvc/code/projects/goals-to-do/client/src/pages/Signup.js":"5","/Users/kvc/code/projects/goals-to-do/client/src/components/Footer.js":"6","/Users/kvc/code/projects/goals-to-do/client/src/pages/Login.js":"7","/Users/kvc/code/projects/goals-to-do/client/src/components/TODO.js":"8","/Users/kvc/code/projects/goals-to-do/client/src/components/Navbar.js":"9","/Users/kvc/code/projects/goals-to-do/client/src/components/Goals.js":"10","/Users/kvc/code/projects/goals-to-do/client/src/utils/mutations.js":"11","/Users/kvc/code/projects/goals-to-do/client/src/utils/auth.js":"12","/Users/kvc/code/projects/goals-to-do/client/src/components/TODOCard.js":"13","/Users/kvc/code/projects/goals-to-do/client/src/components/GoalCard.js":"14","/Users/kvc/code/projects/goals-to-do/client/src/utils/queries.js":"15","/Users/kvc/code/projects/goals-to-do/client/src/components/StepModal.js":"16","/Users/kvc/code/projects/goals-to-do/client/src/pages/TodoDashboard.js":"17","/Users/kvc/code/projects/goals-to-do/client/src/pages/GoalDashboard.js":"18","/Users/kvc/code/projects/goals-to-do/client/src/pages/ProfilePage.js":"19"},{"size":270,"mtime":1654360637515,"results":"20","hashOfConfig":"21"},{"size":2468,"mtime":1654564796863,"results":"22","hashOfConfig":"21"},{"size":272,"mtime":1654360637514,"results":"23","hashOfConfig":"21"},{"size":382,"mtime":1654360637514,"results":"24","hashOfConfig":"21"},{"size":3557,"mtime":1654360637516,"results":"25","hashOfConfig":"21"},{"size":202,"mtime":1654360637514,"results":"26","hashOfConfig":"21"},{"size":2505,"mtime":1654370432906,"results":"27","hashOfConfig":"21"},{"size":2365,"mtime":1654564386363,"results":"28","hashOfConfig":"21"},{"size":532,"mtime":1654370432905,"results":"29","hashOfConfig":"21"},{"size":2985,"mtime":1654564386362,"results":"30","hashOfConfig":"21"},{"size":2571,"mtime":1654564386364,"results":"31","hashOfConfig":"21"},{"size":1048,"mtime":1654370432907,"results":"32","hashOfConfig":"21"},{"size":4073,"mtime":1654564386363,"results":"33","hashOfConfig":"21"},{"size":11951,"mtime":1654564386361,"results":"34","hashOfConfig":"21"},{"size":375,"mtime":1654360637517,"results":"35","hashOfConfig":"21"},{"size":2134,"mtime":1654360637515,"results":"36","hashOfConfig":"21"},{"size":501,"mtime":1654564386364,"results":"37","hashOfConfig":"21"},{"size":490,"mtime":1654370432905,"results":"38","hashOfConfig":"21"},{"size":684,"mtime":1654566721201,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"15e25vp",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kvc/code/projects/goals-to-do/client/src/index.js",[],["85","86"],"/Users/kvc/code/projects/goals-to-do/client/src/App.js",["87"],"/Users/kvc/code/projects/goals-to-do/client/src/components/Header.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/Start.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/pages/Signup.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/Footer.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/pages/Login.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/TODO.js",["88"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_TODO } from '../utils/mutations';\nimport TODOCard from './TODOCard';\n\nconst Todo = (props) => {\n  const [formState, setFormState] = useState({ name: '', priority: '' });\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addTodo({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\n          <div className=\"card-body\">\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of todo\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.todo}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\n                    <option value=\"High\">High</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Low\">Low</option>\n                  </select>\n                </label>\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div> \n        <TODOCard />\n       \n      </div>\n    </main>\n  );\n};\n\nexport default Todo;\n","/Users/kvc/code/projects/goals-to-do/client/src/components/Navbar.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/Goals.js",["89","90"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_GOAL, EDIT_GOAL } from '../utils/mutations';\nimport GoalCard from './GoalCard'\n// Here we are importing a CSS file as a dependency\nimport '../styles/Header.css';\n\nfunction Goals() {\n\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addGoal({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: 'Low',\n      completeByDate: ''\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\n          <div className=\"card-body\">\n\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of goal\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.goal}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select\n                    className=\"form-input\"\n                    placeholder=\"Priority\"\n                    name=\"priority\"\n                    value={formState.priority}\n                    onChange={handleChange}\n                  >\n                    <option value='Low'>Low</option>\n                    <option value='Medium'>Medium</option>\n                    <option value='High'>High</option>\n                  </select>\n                </label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Date to complete by\"\n                  name=\"completeByDate\"\n                  type=\"date\"\n                  value={formState.completeByDate}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <GoalCard />\n      </div>\n    </main>\n  );\n}\n\nexport default Goals;","/Users/kvc/code/projects/goals-to-do/client/src/utils/mutations.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/utils/auth.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/TODOCard.js",["91"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\n\nconst TODOCard = (props) => {\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [removeTodo] = useMutation(REMOVE_TODO);\n\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.todos || [];\n\n  const [viewState, setViewState] = useState('incomplete')\n\n\n  return (\n    <Container className='custom-cont-alter' data-count={props.count}>\n      {/* initial render will display incomplete to dos */}\n      {viewState ? (\n        <>\n          <div className='w-100 display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Incomplete To Do's:`\n                : 'Create a To Do'}\n            </h2>\n            <button className='w-fit-content h-fit-content' onClick={() => { setViewState('') }}>View Completed To Do's</button>\n          </div>\n          {userInfo.map((todo) => {\n            return (\n              todo.completed ? ('') :\n                (<Card key={todo._id} border='dark' className='custom-card-width'>\n                  <Card.Body id={todo._id}>\n                    <Card.Title className='text-center'><h5>{todo.name}</h5></Card.Title>\n                    <div className='display-flex justify-space-between'>\n                      <div className='w-fit-content display-flex flex-column mt-5'>\n                        <p className='small'>Priority: {todo.priority}</p>\n                        <Card.Text>Incomplete</Card.Text>\n                      </div>\n                      <div className='w-50 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: true } })\n                          refetch()\n                        }}>Mark as Complete</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeTodo({ variables: { _id: todo._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                  </Card.Body>\n                </Card>))\n          })}\n        </>) :\n          // displaying completed to do's\n          (<>\n            <div className='w-100 display-flex justify-space-between'>\n              <h2>\n                {userInfo.length\n                  ? `Viewing Completed To Do's:`\n                  : 'Create a To Do'}\n              </h2>\n              <button className='w-fit-content h-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete To Do's</button>\n            </div>\n            {userInfo.map((todo) => {\n              return (\n                todo.completed ? (\n                  <Card key={todo._id} border='dark' className='custom-card-width'>\n                    <Card.Body id={todo._id}>\n                      <Card.Title>{todo.name}</Card.Title>\n                      <p className='small'>Priority: {todo.priority}</p>\n                      <Card.Text>Completed</Card.Text>\n                      <button className='w-fit-content' onClick={(e) => {\n                        updateTodo({ variables: { _id: todo._id, name: todo.name, priority: todo.priority, completed: false } })\n                        refetch()\n                      }}>Completed!</button>\n                      <button className='w-fit-content' onClick={(e) => {\n                        removeTodo({ variables: { _id: todo._id } })\n                        refetch()\n                      }}>Remove</button>\n                    </Card.Body>\n                  </Card>) : ('')\n              )\n            })}\n          </>)}\n    </Container>\n  );\n};\n\nexport default TODOCard;\n","/Users/kvc/code/projects/goals-to-do/client/src/components/GoalCard.js",["92","93","94"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport StepModal from './StepModal'\nimport { UPDATE_STEP, REMOVE_STEP, UPDATE_GOAL, REMOVE_GOAL } from '../utils/mutations';\n\n\nconst GoalCard = (props) => {\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.goals || [];\n\n  const [userState, setUserState] = useState([...userInfo])\n  const [showModal, setShowModal] = useState(false)\n  const [stepState, setStepState] = useState([])\n  const [viewState, setViewState] = useState('incomplete')\n\n  const [updateStep] = useMutation(UPDATE_STEP);\n  const [removeStep] = useMutation(REMOVE_STEP);\n  const [updateGoal] = useMutation(UPDATE_GOAL)\n  const [removeGoal] = useMutation(REMOVE_GOAL)\n\n  let stepArray = []\n\n  if (stepState[0]) {\n    stepArray = stepState\n  } else {\n    stepArray = Object.keys(stepState)\n  }\n\n  const openModal = () => {\n    setShowModal(true)\n  }\n\n  const showSteps = (goalId) => {\n    setStepState({\n      ...stepState,\n      [goalId]: { step: true }\n    })\n  }\n\n  const closeSteps = (goalId) => {\n    const steps = stepArray.filter((step) => step !== goalId)\n    setStepState([...steps])\n  }\n\n  return (\n    <Container>\n      {/* initial render will display incomplete goals */}\n      {viewState ? (\n        <>\n          <div className='display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Incomplete Goals:`\n                : 'Create a Goal'}\n            </h2>\n            <button className='w-fit-content' onClick={() => { setViewState('') }}>View Completed Goals</button>\n          </div>\n          {userInfo.map((goal) => {\n            return (\n              goal.completed ? ('') : (\n                <Card key={goal._id} border='dark'>\n                  <Card.Body>\n                    <Card.Title className='text-center'>\n                      <h5>{goal.name}</h5>\n                    </Card.Title>\n                    <div className='display-flex justify-space-between'>\n                      <Card.Text>\n                        <div className='w-fit-content display-flex flex-column mt-5'>\n                          <p className='mb-0'>Priority: {goal.priority}</p>\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                          <p>Steps: {goal.steps.length}</p>\n                        </div>\n                      </Card.Text>\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\n                          refetch()\n                        }}>Mark as Complete</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeGoal({ variables: { _id: goal._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                    {stepArray.includes(goal._id) ? (\n                      <>\n                        <div key={goal._id} className='mt-3 ml-5'>\n                          <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                          <div className='display-flex flex-column'>\n                            {goal.steps.map((step) => (\n                              step.completed ? (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                      refetch()\n                                    }}>Completed!</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              ) : (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                      refetch()\n                                    }}>Mark Complete</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              )\n                            ))}\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                          </div>\n                        </div>\n                      </>) : ('')}\n                  </Card.Body>\n                </Card>\n              ))\n          })}\n\n        </>) :\n        // displays all the completed goals\n        (<>\n          <div className='display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Completed Goals:`\n                : 'Create a Goal'}\n            </h2>\n            <button className='w-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete Goals</button>\n          </div>\n          {userInfo.map((goal) => {\n            return (\n              goal.completed ? (\n                <Card key={goal._id} border='dark'>\n                  <Card.Body>\n                    <Card.Title className='text-center'>\n                      <h5>{goal.name}</h5>\n                    </Card.Title>\n                    <div className='display-flex justify-space-between'>\n                      <Card.Text>\n                        <div className='w-fit-content display-flex flex-column mt-5'>\n                          <p className='mb-0'>Priority: {goal.priority}</p>\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                          <p>Steps: {goal.steps.length}</p>\n                        </div>\n                      </Card.Text>\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\n                          refetch()\n                        }}>Completed!</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeGoal({ variables: { _id: goal._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                    {stepArray.includes(goal._id) ? (\n                      <>\n                        <div key={goal._id} className='mt-3 ml-5'>\n                          <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                          <div className='display-flex flex-column'>\n                            {goal.steps.map((step) => (\n                              step.completed ? (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                      refetch()\n                                    }}>Completed!</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              ) : (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                      refetch()\n                                    }}>Mark Complete</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              )\n                            ))}\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                          </div>\n                        </div>\n                      </>) : ('')}\n                  </Card.Body>\n                </Card>\n              ) : (''))\n          })}\n        </>)}\n    </Container>\n  );\n};\n\nexport default GoalCard;\n","/Users/kvc/code/projects/goals-to-do/client/src/utils/queries.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/StepModal.js",["95","96"],"import React, { useRef, useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { useMutation } from '@apollo/client';\nimport { ADD_STEP } from '../utils/mutations';\n\nconst StepModal = ({ setShowModal, goalId }) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n  const closeModal = (e) => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  };\n\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\n\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addStep({\n        variables: { ...formState },\n      });\n      console.log(formState);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n    });\n  };\n\n  //render the modal JSX in the portal div.\n  return ReactDom.createPortal(\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\n      <div className=\"modal display-flex flex-column\">\n        <h5 className='m-3'>Add Step</h5>\n        <form className='w-75' onSubmit={handleFormSubmit}>\n          <input\n            className=\"form-input\"\n            placeholder=\"Name of step\"\n            name=\"name\"\n            type=\"text\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n          <button\n            className=\"btn btn-block btn-info\"\n            style={{ cursor: 'pointer' }}\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\n      </div>\n    </div>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default StepModal;","/Users/kvc/code/projects/goals-to-do/client/src/pages/TodoDashboard.js",["97"],"import React, { useState } from \"react\";\n// import Start from './Start'\n// import Login from '../pages/Login';\nimport Navbar from '../components/Navbar';\nimport TODO from \"../components/TODO\";\nimport Auth from \"../utils/auth\";\n\n\nfunction Dashboard() {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if(!token) {\n        window.location.href = \"/\"\n    }\n\n    return (\n        <section>\n            <Navbar />\n            <TODO />\n        </section>\n    );\n}\n\nexport default Dashboard;","/Users/kvc/code/projects/goals-to-do/client/src/pages/GoalDashboard.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/pages/ProfilePage.js",["98","99"],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":12,"column":8,"nodeType":"106","messageId":"107","endLine":12,"endColumn":14},{"ruleId":"104","severity":1,"message":"108","line":8,"column":28,"nodeType":"106","messageId":"107","endLine":8,"endColumn":32},{"ruleId":"104","severity":1,"message":"109","line":3,"column":20,"nodeType":"106","messageId":"107","endLine":3,"endColumn":29},{"ruleId":"104","severity":1,"message":"108","line":11,"column":28,"nodeType":"106","messageId":"107","endLine":11,"endColumn":32},{"ruleId":"104","severity":1,"message":"110","line":11,"column":11,"nodeType":"106","messageId":"107","endLine":11,"endColumn":18},{"ruleId":"104","severity":1,"message":"110","line":10,"column":11,"nodeType":"106","messageId":"107","endLine":10,"endColumn":18},{"ruleId":"104","severity":1,"message":"111","line":18,"column":10,"nodeType":"106","messageId":"107","endLine":18,"endColumn":19},{"ruleId":"104","severity":1,"message":"112","line":18,"column":21,"nodeType":"106","messageId":"107","endLine":18,"endColumn":33},{"ruleId":"104","severity":1,"message":"113","line":17,"column":21,"nodeType":"106","messageId":"107","endLine":17,"endColumn":26},{"ruleId":"104","severity":1,"message":"108","line":17,"column":28,"nodeType":"106","messageId":"107","endLine":17,"endColumn":32},{"ruleId":"104","severity":1,"message":"114","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"114","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":11,"column":13,"nodeType":"117","endLine":13,"endColumn":15},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'EDIT_GOAL' is defined but never used.","'loading' is assigned a value but never used.","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]