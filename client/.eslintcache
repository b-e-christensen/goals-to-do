[{"/Users/kvc/code/projects/goals-to-do/client/src/index.js":"1","/Users/kvc/code/projects/goals-to-do/client/src/App.js":"2","/Users/kvc/code/projects/goals-to-do/client/src/components/Header.js":"3","/Users/kvc/code/projects/goals-to-do/client/src/components/Start.js":"4","/Users/kvc/code/projects/goals-to-do/client/src/pages/Signup.js":"5","/Users/kvc/code/projects/goals-to-do/client/src/components/Footer.js":"6","/Users/kvc/code/projects/goals-to-do/client/src/pages/Login.js":"7","/Users/kvc/code/projects/goals-to-do/client/src/pages/Dashboard.js":"8","/Users/kvc/code/projects/goals-to-do/client/src/components/TODO.js":"9","/Users/kvc/code/projects/goals-to-do/client/src/components/Navbar.js":"10","/Users/kvc/code/projects/goals-to-do/client/src/components/Goals.js":"11","/Users/kvc/code/projects/goals-to-do/client/src/utils/mutations.js":"12","/Users/kvc/code/projects/goals-to-do/client/src/utils/auth.js":"13","/Users/kvc/code/projects/goals-to-do/client/src/components/TODOCard.js":"14","/Users/kvc/code/projects/goals-to-do/client/src/components/GoalCard.js":"15","/Users/kvc/code/projects/goals-to-do/client/src/utils/queries.js":"16","/Users/kvc/code/projects/goals-to-do/client/src/components/StepModal.js":"17"},{"size":270,"mtime":1654360637515,"results":"18","hashOfConfig":"19"},{"size":2146,"mtime":1654360637514,"results":"20","hashOfConfig":"19"},{"size":272,"mtime":1654360637514,"results":"21","hashOfConfig":"19"},{"size":382,"mtime":1654360637514,"results":"22","hashOfConfig":"19"},{"size":3557,"mtime":1654360637516,"results":"23","hashOfConfig":"19"},{"size":202,"mtime":1654360637514,"results":"24","hashOfConfig":"19"},{"size":2509,"mtime":1654360637516,"results":"25","hashOfConfig":"19"},{"size":965,"mtime":1654360637516,"results":"26","hashOfConfig":"19"},{"size":2488,"mtime":1654360637515,"results":"27","hashOfConfig":"19"},{"size":565,"mtime":1654360637514,"results":"28","hashOfConfig":"19"},{"size":2975,"mtime":1654360637514,"results":"29","hashOfConfig":"19"},{"size":2425,"mtime":1654360637517,"results":"30","hashOfConfig":"19"},{"size":1052,"mtime":1654360637517,"results":"31","hashOfConfig":"19"},{"size":1653,"mtime":1654360637515,"results":"32","hashOfConfig":"19"},{"size":6197,"mtime":1654360637514,"results":"33","hashOfConfig":"19"},{"size":375,"mtime":1654360637517,"results":"34","hashOfConfig":"19"},{"size":2134,"mtime":1654360637515,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15e25vp",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"/Users/kvc/code/projects/goals-to-do/client/src/index.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/App.js",["76"],"import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// Custom components and page loads \nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './pages/Login'\nimport Signup from './pages/Signup'\nimport Start from './components/Start'\nimport Dashboard from './pages/Dashboard';\n//import Auth from './utils/auth';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route \n                path=\"/\" \n                element={<Start />}\n              />\n              <Route \n                path=\"/login\" \n                element={<Login />}\n              />\n              <Route \n                path=\"/signup\" \n                element={<Signup />}\n              />\n              <Route \n                path=\"/dashboard\" \n                element={<Dashboard />}\n              />\n            </Routes>\n          </div>\n          {/* <Footer /> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/Users/kvc/code/projects/goals-to-do/client/src/components/Header.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/Start.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/pages/Signup.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/Footer.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/pages/Login.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/pages/Dashboard.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/TODO.js",["77"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_TODO } from '../utils/mutations';\nimport TODOCard from './TODOCard';\n\nconst Todo = (props) => {\n  const [formState, setFormState] = useState({ name: '', priority: '' });\n  const [addTodo, { error, data }] = useMutation(ADD_TODO);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addTodo({\n        variables: { ...formState },\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: '',\n    });\n    window.location.reload();\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Success!\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of todo\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.todo}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\n                    <option value=\"High\">High</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Low\">Low</option>\n                  </select>\n                </label>\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div> \n        <TODOCard />\n       \n      </div>\n    </main>\n  );\n};\n\nexport default Todo;\n","/Users/kvc/code/projects/goals-to-do/client/src/components/Navbar.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/Goals.js",["78"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_GOAL } from '../utils/mutations';\nimport GoalCard from './GoalCard'\n// Here we are importing a CSS file as a dependency\nimport '../styles/Header.css';\n\nfunction Goals() {\n\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addGoal({\n        variables: { ...formState },\n      });\n\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: 'Low',\n      completeByDate: ''\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\n          <div className=\"card-body\">\n\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of goal\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.goal}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select\n                    className=\"form-input\"\n                    placeholder=\"Priority\"\n                    name=\"priority\"\n                    value={formState.priority}\n                    onChange={handleChange}\n                  >\n                    <option value='Low'>Low</option>\n                    <option value='Medium'>Medium</option>\n                    <option value='High'>High</option>\n                  </select>\n                </label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Date to complete by\"\n                  name=\"completeByDate\"\n                  type=\"date\"\n                  value={formState.completeByDate}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <GoalCard />\n      </div>\n    </main>\n  );\n}\n\nexport default Goals;","/Users/kvc/code/projects/goals-to-do/client/src/utils/mutations.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/utils/auth.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/TODOCard.js",["79"],"import React from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport { UPDATE_TODO, REMOVE_TODO } from '../utils/mutations';\n\nconst TODOCard = (props) => {\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [removeTodo] = useMutation(REMOVE_TODO);\n\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n  const userInfo = data?.getUser.todos || [];\n\n\n  return (\n    <Container className='custom-cont-alter' data-count={props.count}>\n      <h2>\n        {userInfo.length\n          ? `Viewing ${userInfo.length} To Do's:`\n          : 'Create a To Do'}\n      </h2>\n\n      {userInfo.map((todo) => {\n        return (\n          <Card key={todo._id} border='dark' className='custom-card-width'>\n            <Card.Body id={todo._id}>\n              <Card.Title>{todo.name}</Card.Title>\n              <p className='small'>Priority: {todo.priority}</p>\n              {todo.completed ? (<Card.Text>Completed</Card.Text>) : (\n                <Card.Text>Not yet completed</Card.Text>\n              )}\n              \n              <label> Mark as Complete\n                <input type=\"checkbox\" onChange={(e) => {updateTodo({variables: {_id: todo._id, name: todo.name, completed: true, priority: todo.priority}}); refetch()}}/>\n              </label>\n              <label> Remove\n                <input type=\"checkbox\" onChange={(e) => { removeTodo({variables: {_id: todo._id}}); refetch() }} />\n              </label>\n            </Card.Body >\n          </Card>\n        );\n      })}\n\n    </Container>\n  );\n};\n\nexport default TODOCard;\n","/Users/kvc/code/projects/goals-to-do/client/src/components/GoalCard.js",["80","81","82"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport StepModal from './StepModal'\nimport { UPDATE_STEP, REMOVE_STEP, UPDATE_GOAL, REMOVE_GOAL } from '../utils/mutations';\n\n\nconst GoalCard = (props) => {\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.goals || [];\n  console.log([...userInfo])\n\n  const [userState, setUserState] = useState([...userInfo])\n  const [showModal, setShowModal] = useState(false)\n  const [stepState, setStepState] = useState([])\n\n  const [updateStep] = useMutation(UPDATE_STEP);\n  const [removeStep] = useMutation(REMOVE_STEP);\n  const [updateGoal] = useMutation(UPDATE_GOAL)\n  const [removeGoal] = useMutation(REMOVE_GOAL)\n\n  let stepArray = []\n\n  if (stepState[0]) {\n    stepArray = stepState\n  } else {\n    stepArray = Object.keys(stepState)\n  }\n\n  const openModal = () => {\n    setShowModal(true)\n  }\n\n  const showSteps = (goalId) => {\n    setStepState({\n      ...stepState,\n      [goalId]: { step: true }\n    })\n  }\n\n  const closeSteps = (goalId) => {\n    const steps = stepArray.filter((step) => step !== goalId)\n    setStepState([...steps])\n  }\n\n  return (\n    <Container>\n      <h2>\n        {userInfo.length\n          ? `Viewing ${userInfo.length} Goals:`\n          : 'Create a Goal'}\n      </h2>\n\n      {userInfo.map((goal) => {\n        return (\n          <Card key={goal._id} border='dark'>\n            <Card.Body>\n              <Card.Title className='text-center'>\n                <h5>{goal.name}</h5>\n              </Card.Title>\n              <div className='display-flex justify-space-between'>\n                <Card.Text>\n                  <div className='w-fit-content display-flex flex-column mt-5'>\n                    <p className='mb-0'>Priority: {goal.priority}</p>\n                    <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                    <p>Steps: {goal.steps.length}</p>\n                  </div>\n                </Card.Text>\n                <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                  <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                  { goal.completed ?\n                    (<button className='w-fit-content' onClick={(e) => {\n                      updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\n                      refetch()\n                    }}>Completed!</button>) :\n                    (<button className='w-fit-content' onClick={(e) => {\n                      updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\n                      refetch()\n                    }}>Mark as Complete</button>) }\n                  <button className='w-fit-content' onClick={(e) => { removeGoal({ variables: { _id: goal._id }})\n                  refetch()}}>Remove</button>\n                </div>\n              </div>\n              {stepArray.includes(goal._id) ? (\n                <>\n                  <div key={goal._id} className='mt-3 ml-5'>\n                    <div className='b-border display-flex justify-space-between'>\n                      <h6>Step(s) to complete {goal.name}</h6>\n                      <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                      {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                    </div>\n                    <div className='display-flex flex-column'>\n                      {goal.steps.map((step) => (\n                        step.completed ? (\n                          <div key={step._id} className='display-flex flex-row justify-space-between'>\n                            <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                            <div className='w-25 display-flex flex-end justify-space-around'>\n                              <button className='w-fit-content' onClick={(e) => {\n                                updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                refetch()\n                              }}>Completed!</button>\n                              <button className='w-fit-content' onClick={(e) => {\n                                removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                refetch()\n                              }}>Remove</button>\n                            </div>\n                          </div>\n                        ) : (\n                          <div key={step._id} className='display-flex flex-row justify-space-between'>\n                            <p className='b-border-step ml-5'> - {step.name}</p>\n                            <div className='w-25 display-flex flex-end justify-space-around'>\n                              <button className='w-fit-content' onClick={(e) => {\n                                updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                refetch()\n                              }}>Mark Complete</button>\n                              <button className='w-fit-content' onClick={(e) => {\n                                removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                refetch()\n                              }}>Remove</button>\n                            </div>\n                          </div>\n                        )\n                      ))}\n                      <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                    </div>\n                  </div>\n                </>) : ('')}\n            </Card.Body>\n          </Card>\n        );\n      })}\n\n    </Container>\n  );\n};\n\nexport default GoalCard;\n","/Users/kvc/code/projects/goals-to-do/client/src/utils/queries.js",[],"/Users/kvc/code/projects/goals-to-do/client/src/components/StepModal.js",["83","84"],"import React, { useRef, useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { useMutation } from '@apollo/client';\nimport { ADD_STEP } from '../utils/mutations';\n\nconst StepModal = ({ setShowModal, goalId }) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n  const closeModal = (e) => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  };\n\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\n\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addStep({\n        variables: { ...formState },\n      });\n      console.log(formState);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n    });\n  };\n\n  //render the modal JSX in the portal div.\n  return ReactDom.createPortal(\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\n      <div className=\"modal display-flex flex-column\">\n        <h5 className='m-3'>Add Step</h5>\n        <form className='w-75' onSubmit={handleFormSubmit}>\n          <input\n            className=\"form-input\"\n            placeholder=\"Name of step\"\n            name=\"name\"\n            type=\"text\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n          <button\n            className=\"btn btn-block btn-info\"\n            style={{ cursor: 'pointer' }}\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\n      </div>\n    </div>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default StepModal;",{"ruleId":"85","severity":1,"message":"86","line":12,"column":8,"nodeType":"87","messageId":"88","endLine":12,"endColumn":14},{"ruleId":"85","severity":1,"message":"89","line":25,"column":15,"nodeType":"87","messageId":"88","endLine":25,"endColumn":19},{"ruleId":"85","severity":1,"message":"89","line":11,"column":28,"nodeType":"87","messageId":"88","endLine":11,"endColumn":32},{"ruleId":"85","severity":1,"message":"90","line":11,"column":11,"nodeType":"87","messageId":"88","endLine":11,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":10,"column":11,"nodeType":"87","messageId":"88","endLine":10,"endColumn":18},{"ruleId":"85","severity":1,"message":"91","line":19,"column":10,"nodeType":"87","messageId":"88","endLine":19,"endColumn":19},{"ruleId":"85","severity":1,"message":"92","line":19,"column":21,"nodeType":"87","messageId":"88","endLine":19,"endColumn":33},{"ruleId":"85","severity":1,"message":"93","line":17,"column":21,"nodeType":"87","messageId":"88","endLine":17,"endColumn":26},{"ruleId":"85","severity":1,"message":"89","line":17,"column":28,"nodeType":"87","messageId":"88","endLine":17,"endColumn":32},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'error' is assigned a value but never used."]