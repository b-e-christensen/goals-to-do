[{"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\index.js":"1","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\App.js":"2","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js":"3","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js":"4","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js":"5","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js":"6","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js":"7","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js":"8","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js":"9","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js":"10","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js":"11","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js":"12","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js":"13","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js":"14","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js":"15","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js":"16","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js":"17","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js":"18","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js":"19","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js":"20"},{"size":270,"mtime":1654136270619,"results":"21","hashOfConfig":"22"},{"size":2308,"mtime":1654562626251,"results":"23","hashOfConfig":"22"},{"size":382,"mtime":1654136270617,"results":"24","hashOfConfig":"22"},{"size":272,"mtime":1654136270616,"results":"25","hashOfConfig":"22"},{"size":202,"mtime":1654136270615,"results":"26","hashOfConfig":"22"},{"size":490,"mtime":1654562626256,"results":"27","hashOfConfig":"22"},{"size":3557,"mtime":1654136270621,"results":"28","hashOfConfig":"22"},{"size":501,"mtime":1654562626257,"results":"29","hashOfConfig":"22"},{"size":2505,"mtime":1654562626257,"results":"30","hashOfConfig":"22"},{"size":2985,"mtime":1654563046506,"results":"31","hashOfConfig":"22"},{"size":2387,"mtime":1654569582002,"results":"32","hashOfConfig":"22"},{"size":1048,"mtime":1654562626258,"results":"33","hashOfConfig":"22"},{"size":2715,"mtime":1654569288724,"results":"34","hashOfConfig":"22"},{"size":1349,"mtime":1654567959245,"results":"35","hashOfConfig":"22"},{"size":12384,"mtime":1654570483367,"results":"36","hashOfConfig":"22"},{"size":4611,"mtime":1654570857273,"results":"37","hashOfConfig":"22"},{"size":2214,"mtime":1654568935284,"results":"38","hashOfConfig":"22"},{"size":2134,"mtime":1654136270617,"results":"39","hashOfConfig":"22"},{"size":375,"mtime":1654136270627,"results":"40","hashOfConfig":"22"},{"size":2214,"mtime":1654570937124,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1ym5k2z",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\index.js",[],["91","92"],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\App.js",["93"],"import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// Custom components and page loads \nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './pages/Login'\nimport Signup from './pages/Signup'\nimport Start from './components/Start'\nimport TodoDashboard from './pages/TodoDashboard';\nimport GoalDashboard from './pages/GoalDashboard'\n//import Auth from './utils/auth';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={<Start />}\n              />\n              <Route\n                path=\"/login\"\n                element={<Login />}\n              />\n              <Route\n                path=\"/signup\"\n                element={<Signup />}\n              />\n              <Route\n                path=\"/todos\"\n                element={<TodoDashboard />}\n              />\n              <Route\n                path=\"/goals\"\n                element={<GoalDashboard />}\n              />\n            </Routes>\n          </div>\n          {/* <Footer /> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Start.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Header.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Footer.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\GoalDashboard.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Signup.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\TodoDashboard.js",["94"],"import React, { useState } from \"react\";\n// import Start from './Start'\n// import Login from '../pages/Login';\nimport Navbar from '../components/Navbar';\nimport TODO from \"../components/TODO\";\nimport Auth from \"../utils/auth\";\n\n\nfunction Dashboard() {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if(!token) {\n        window.location.href = \"/\"\n    }\n\n    return (\n        <section>\n            <Navbar />\n            <TODO />\n        </section>\n    );\n}\n\nexport default Dashboard;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\pages\\Login.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Goals.js",["95","96"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_GOAL, EDIT_GOAL } from '../utils/mutations';\nimport GoalCard from './GoalCard'\n// Here we are importing a CSS file as a dependency\nimport '../styles/Header.css';\n\nfunction Goals() {\n\n  const [formState, setFormState] = useState({ name: '', priority: 'Low', completeByDate: '' });\n  const [addGoal, { error, data }] = useMutation(ADD_GOAL);\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addGoal({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: 'Low',\n      completeByDate: ''\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create Goal</h4>\n          <div className=\"card-body\">\n\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of goal\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.goal}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select\n                    className=\"form-input\"\n                    placeholder=\"Priority\"\n                    name=\"priority\"\n                    value={formState.priority}\n                    onChange={handleChange}\n                  >\n                    <option value='Low'>Low</option>\n                    <option value='Medium'>Medium</option>\n                    <option value='High'>High</option>\n                  </select>\n                </label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Date to complete by\"\n                  name=\"completeByDate\"\n                  type=\"date\"\n                  value={formState.completeByDate}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <GoalCard />\n      </div>\n    </main>\n  );\n}\n\nexport default Goals;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODO.js",["97"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_TODO, EDIT_TODO } from '../utils/mutations';\nimport TODOCard from './TODOCard';\n\nconst Todo = (props) => {\n  const [formState, setFormState] = useState({ name: '', priority: '' });\n  const [addTodo, { error, data }] = useMutation(ADD_TODO, EDIT_TODO);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addTodo({\n        variables: { ...formState },\n      });\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n      priority: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Create To Do</h4>\n          <div className=\"card-body\">\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Name of todo\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formState.todo}\n                  onChange={handleChange}\n                />\n                <label>\n                  Priority\n                  <select value={formState.priority} onChange={handleChange} name=\"priority\" className=\"form-input\">\n                    <option value=\"High\">High</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Low\">Low</option>\n                  </select>\n                </label>\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div> \n        <TODOCard />\n       \n      </div>\n    </main>\n  );\n};\n\nexport default Todo;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\auth.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\mutations.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\Navbar.js",["98"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Navbar.css';\nimport Auth from '../utils/auth';\nimport ThemeSVG from '../styles/images/theme.svg'\nimport useLocalStorage from 'use-local-storage'\n\n// In Navbar, we can assign a style from an object by using curly braces\nfunction Navbar({ currentPage, handlePageChange }) {\n  const defaultDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [theme, setTheme] = useLocalStorage('theme', defaultDark ? 'dark' : 'light');\n  const el = document.getElementById('root')\n  el.classList.add(`${theme}`)\n  \n  const switchTheme = () => {\n    el.classList.remove(`${theme}`)\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme)\n  }\n\n\n\n  console.log(document.getElementsByTagName('body'))\n  return (\n    <div className='nav-card'>\n      <div className='nav-card-header'>\n        <Link to=\"/todos\">To Do</Link>\n        <Link to=\"/goals\">Goals</Link>\n        <button aria-label=\"Changes light and dark mode\" id=\"darkmode-button\" className=\"nav-link-dark\" onClick={switchTheme}>\n                        <img src={ThemeSVG} className=\"nav-link-dark-img\"></img>\n                        </button>\n        <button onClick={Auth.logout} className=\"logout-btn\">Logout</button>\n        </div>\n\n    </div>\n  );\n}\n\nexport default Navbar;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalCard.js",["99","100","101"],"import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Container, Card } from 'react-bootstrap';\nimport { GET_USER_ALL } from '../utils/queries'\nimport StepModal from './StepModal'\nimport GoalsModal from './GoalsModal'\nimport { UPDATE_STEP, REMOVE_STEP, UPDATE_GOAL, REMOVE_GOAL } from '../utils/mutations';\n\n\nconst GoalCard = (props) => {\n  const { loading, data, refetch } = useQuery(GET_USER_ALL);\n\n  useEffect(() => {\n    refetch()\n  })\n\n  const userInfo = data?.getUser.goals || [];\n\n  const [userState, setUserState] = useState([...userInfo])\n  const [showModal, setShowModal] = useState(false)\n  const [stepState, setStepState] = useState([])\n  const [viewState, setViewState] = useState('incomplete')\n\n  const [updateStep] = useMutation(UPDATE_STEP);\n  const [removeStep] = useMutation(REMOVE_STEP);\n  const [updateGoal] = useMutation(UPDATE_GOAL)\n  const [removeGoal] = useMutation(REMOVE_GOAL)\n\n  let stepArray = []\n\n  if (stepState[0]) {\n    stepArray = stepState\n  } else {\n    stepArray = Object.keys(stepState)\n  }\n\n  const openModal = () => {\n    setShowModal(true)\n  }\n\n  const showSteps = (goalId) => {\n    setStepState({\n      ...stepState,\n      [goalId]: { step: true }\n    })\n  }\n\n  const closeSteps = (goalId) => {\n    const steps = stepArray.filter((step) => step !== goalId)\n    setStepState([...steps])\n  }\n\n  return (\n    <Container>\n      {/* initial render will display incomplete goals */}\n      {viewState ? (\n        <>\n          <div className='display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Incomplete Goals:`\n                : 'Create a Goal'}\n            </h2>\n            <button className='w-fit-content' onClick={() => { setViewState('') }}>View Completed Goals</button>\n          </div>\n          {userInfo.map((goal) => {\n            return (\n              goal.completed ? ('') : (\n                <Card key={goal._id} border='dark'>\n                  <Card.Body>\n                    <Card.Title className='text-center'>\n                      <h5>{goal.name}</h5>\n                    </Card.Title>\n                    <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Edit Goal</button>\n                            {showModal ? <GoalsModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                    <div className='display-flex justify-space-between'>\n                      <Card.Text>\n                        <div className='w-fit-content display-flex flex-column mt-5'>\n                          <p className='mb-0'>Priority: {goal.priority}</p>\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                          <p>Steps: {goal.steps.length}</p>\n                        </div>\n                      </Card.Text>\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: true } })\n                          refetch()\n                        }}>Mark as Complete</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeGoal({ variables: { _id: goal._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                    {stepArray.includes(goal._id) ? (\n                      <>\n                        <div key={goal._id} className='mt-3 ml-5'>\n                          <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                          <div className='display-flex flex-column'>\n                            {goal.steps.map((step) => (\n                              step.completed ? (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                      refetch()\n                                    }}>Completed!</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              ) : (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                      refetch()\n                                    }}>Mark Complete</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              )\n                            ))}\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                          </div>\n                        </div>\n                      </>) : ('')}\n                  </Card.Body>\n                </Card>\n              ))\n          })}\n\n        </>) :\n        // displays all the completed goals\n        (<>\n          <div className='display-flex justify-space-between'>\n            <h2>\n              {userInfo.length\n                ? `Viewing Completed Goals:`\n                : 'Create a Goal'}\n            </h2>\n            <button className='w-fit-content' onClick={() => { setViewState('incomplete') }}>View Incomplete Goals</button>\n          </div>\n          {userInfo.map((goal) => {\n            return (\n              goal.completed ? (\n                <Card key={goal._id} border='dark'>\n                  <Card.Body>\n                    <Card.Title className='text-center'>\n                      <h5>{goal.name}</h5>\n                    </Card.Title>\n                    <div className='display-flex justify-space-between'>\n                      <Card.Text>\n                        <div className='w-fit-content display-flex flex-column mt-5'>\n                          <p className='mb-0'>Priority: {goal.priority}</p>\n                          <p className='mb-0'>Complete by date: {new Date(+goal.completeByDate).toLocaleString(\"en-US\", { day: \"numeric\", \"month\": \"numeric\", \"year\": \"numeric\" })}</p>\n                          <p>Steps: {goal.steps.length}</p>\n                        </div>\n                      </Card.Text>\n                      <div className='w-25 display-flex flex-column justify-space-around align-center'>\n                        <button className='w-fit-content' onClick={(e) => showSteps(goal._id)}>Add/View Steps</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          updateGoal({ variables: { _id: goal._id, name: goal.name, completeByDate: goal.completeByDate, priority: goal.priority, completed: false } })\n                          refetch()\n                        }}>Completed!</button>\n                        <button className='w-fit-content' onClick={(e) => {\n                          removeGoal({ variables: { _id: goal._id } })\n                          refetch()\n                        }}>Remove</button>\n                      </div>\n                    </div>\n                    {stepArray.includes(goal._id) ? (\n                      <>\n                        <div key={goal._id} className='mt-3 ml-5'>\n                          <div className='b-border display-flex justify-space-between'>\n                            <h6>Step(s) to complete {goal.name}</h6>\n                            <button className='w-fit-content' onClick={openModal}>Add Step</button>\n                            {showModal ? <StepModal setShowModal={setShowModal} goalId={goal._id} /> : null}\n                          </div>\n                          <div className='display-flex flex-column'>\n                            {goal.steps.map((step) => (\n                              step.completed ? (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5 line-through'>{step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: false } })\n                                      refetch()\n                                    }}>Completed!</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              ) : (\n                                <div key={step._id} className='display-flex flex-row justify-space-between'>\n                                  <p className='b-border-step ml-5'> - {step.name}</p>\n                                  <div className='w-25 display-flex flex-end justify-space-around'>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      updateStep({ variables: { _id: step._id, name: step.name, completed: true } })\n                                      refetch()\n                                    }}>Mark Complete</button>\n                                    <button className='w-fit-content' onClick={(e) => {\n                                      removeStep({ variables: { _id: step._id, goalId: goal._id } })\n                                      refetch()\n                                    }}>Remove</button>\n                                  </div>\n                                </div>\n                              )\n                            ))}\n                            <button className='w-fit-content' onClick={() => closeSteps(goal._id)}>Close Steps</button>\n                          </div>\n                        </div>\n                      </>) : ('')}\n                  </Card.Body>\n                </Card>\n              ) : (''))\n          })}\n        </>)}\n    </Container>\n  );\n};\n\nexport default GoalCard;\n","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\TODOCard.js",["102","103"],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\GoalsModal.js",["104","105"],"import React, { useRef, useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_GOAL } from '../utils/mutations';\r\n\r\nconst StepModal = ({ setShowModal, goalId }) => {\r\n  // close the modal when clicking outside the modal.\r\n  const modalRef = useRef();\r\n  const closeModal = (e) => {\r\n    if (e.target === modalRef.current) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\r\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\r\n  const [addStep, { error, data }] = useMutation(EDIT_GOAL);\r\n\r\n  console.log(formState)\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await addStep({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(formState);\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  //render the modal JSX in the portal div.\r\n  return ReactDom.createPortal(\r\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\r\n      <div className=\"modal display-flex flex-column\">\r\n        <h5 className='m-3'>Edit Goal</h5>\r\n        <form className='w-75' onSubmit={handleFormSubmit}>\r\n          <input\r\n            className=\"form-input\"\r\n            placeholder=\"Name of goal\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={formState.name}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn btn-block btn-info\"\r\n            style={{ cursor: 'pointer' }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default StepModal;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\StepModal.js",["106","107"],"import React, { useRef, useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { useMutation } from '@apollo/client';\nimport { ADD_STEP } from '../utils/mutations';\n\nconst StepModal = ({ setShowModal, goalId }) => {\n  // close the modal when clicking outside the modal.\n  const modalRef = useRef();\n  const closeModal = (e) => {\n    if (e.target === modalRef.current) {\n      setShowModal(false);\n    }\n  };\n\n  const [formState, setFormState] = useState({ name: '', goalId: goalId });\n  // const [addStep, { error, data }] = useMutation(ADD_STEP);\n  const [addStep, { error, data }] = useMutation(ADD_STEP);\n\n  console.log(formState)\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await addStep({\n        variables: { ...formState },\n      });\n      console.log(formState);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      name: '',\n    });\n  };\n\n  //render the modal JSX in the portal div.\n  return ReactDom.createPortal(\n    <div className=\"container\" ref={modalRef} onClick={closeModal}>\n      <div className=\"modal display-flex flex-column\">\n        <h5 className='m-3'>Add Step</h5>\n        <form className='w-75' onSubmit={handleFormSubmit}>\n          <input\n            className=\"form-input\"\n            placeholder=\"Name of step\"\n            name=\"name\"\n            type=\"text\"\n            value={formState.name}\n            onChange={handleChange}\n          />\n          <button\n            className=\"btn btn-block btn-info\"\n            style={{ cursor: 'pointer' }}\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button className='modal-button w-25' onClick={() => setShowModal(false)}>X</button>\n      </div>\n    </div>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default StepModal;","C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\utils\\queries.js",[],"C:\\Users\\monty\\bootcamp\\code\\projects\\goals-to-do\\client\\src\\components\\ToDoModal.js",["108","109"],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":12,"column":8,"nodeType":"116","messageId":"117","endLine":12,"endColumn":14},{"ruleId":"114","severity":1,"message":"118","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"119","line":3,"column":20,"nodeType":"116","messageId":"117","endLine":3,"endColumn":29},{"ruleId":"114","severity":1,"message":"120","line":11,"column":28,"nodeType":"116","messageId":"117","endLine":11,"endColumn":32},{"ruleId":"114","severity":1,"message":"120","line":8,"column":28,"nodeType":"116","messageId":"117","endLine":8,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":30,"column":25,"nodeType":"123","endLine":30,"endColumn":75},{"ruleId":"114","severity":1,"message":"124","line":11,"column":11,"nodeType":"116","messageId":"117","endLine":11,"endColumn":18},{"ruleId":"114","severity":1,"message":"125","line":19,"column":10,"nodeType":"116","messageId":"117","endLine":19,"endColumn":19},{"ruleId":"114","severity":1,"message":"126","line":19,"column":21,"nodeType":"116","messageId":"117","endLine":19,"endColumn":33},{"ruleId":"114","severity":1,"message":"127","line":6,"column":36,"nodeType":"116","messageId":"117","endLine":6,"endColumn":45},{"ruleId":"114","severity":1,"message":"124","line":12,"column":11,"nodeType":"116","messageId":"117","endLine":12,"endColumn":18},{"ruleId":"114","severity":1,"message":"128","line":17,"column":21,"nodeType":"116","messageId":"117","endLine":17,"endColumn":26},{"ruleId":"114","severity":1,"message":"120","line":17,"column":28,"nodeType":"116","messageId":"117","endLine":17,"endColumn":32},{"ruleId":"114","severity":1,"message":"128","line":17,"column":21,"nodeType":"116","messageId":"117","endLine":17,"endColumn":26},{"ruleId":"114","severity":1,"message":"120","line":17,"column":28,"nodeType":"116","messageId":"117","endLine":17,"endColumn":32},{"ruleId":"114","severity":1,"message":"128","line":17,"column":21,"nodeType":"116","messageId":"117","endLine":17,"endColumn":26},{"ruleId":"114","severity":1,"message":"120","line":17,"column":28,"nodeType":"116","messageId":"117","endLine":17,"endColumn":32},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'EDIT_GOAL' is defined but never used.","'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'loading' is assigned a value but never used.","'userState' is assigned a value but never used.","'setUserState' is assigned a value but never used.","'EDIT_TODO' is defined but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]